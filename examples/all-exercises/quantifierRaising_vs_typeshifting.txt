Exercise on quantifiers in subject and object position

# Author and license holder of this file: Lucas Champollion (champollion@nyu.edu)
# This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA 4.0). You are free to share — copy and redistribute the material in any medium or format; adapt — remix, transform, and build upon the material for any purpose, even commercially. 
constants of type e : c p r s mvariables of type e : x-zvariables of type v : evariables of type <e,t> : P-Q X-Zvariables of type <e,et> : Rmultiple letter identifiersuse rule function applicationuse rule non-branching nodesuse rule predicate modificationuse rule lambda abstractiondefine mary : mdefine everybody : LP.Ax.[person(x)->P(x)]
define everybody : LR.Ly.Ax.[person(x)->R(x)(y)]
define loves: LxLy[loves(y,x)]
define sleeps: Lx[sleeps(x)]
exercise treetitle Subject positioninstructions In subject position, no problem.

[.S [.NP everybody] [.VP [.V loves] [.NP mary]]]


exercise treetitle Object positioninstructions In object position, the entry from the prevous exercise doesn't work.

[.S [.NP mary] [.VP [.V loves] [.NP everybody]]]

exercise treetitle Object position with QR
instructions One solution is to raise the quantifier from object position into a position above the subject.

[.SBAR [.NP everybody] [ 1 [.S [.NP mary] [.VP [.V loves] [.NP t_1]]]]]

exercise treetitle Flexible types
instructions Another solution is to give the quantifier in object position another lexical entry with a different type. This is called the flexible types approach.

[.S [.NP mary] [.VP [.V loves] [.NP everybody]]]


