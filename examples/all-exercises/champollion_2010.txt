Champollion 2010 - Quantification and negation in event semantics

# Author and license holder of this file: Lucas Champollion (champollion@nyu.edu)
# This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA 4.0). You are free to share — copy and redistribute the material in any medium or format; adapt — remix, transform, and build upon the material for any purpose, even commercially. 

# The following directive instructs the program to
# interpret multiple-letter constants and variables
# properly.

multiple letter identifiers

# "use rule" directives are for tree evaluation exercises.
# They indicate which composition rules are available
# at nonterminals.

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction

variables of type v : e 
variables of type <v,t> : f g mxe
variables of type <<v,t>,t> : V two
variables of type <<vt,t>,<vt,t>>: M
constants of type <<i,vt>,<i,vt>>: cumul
constants of type <i,n>: hours
variables of type e : x y z X Y
variables of type i : t
variables of type <e,t> : P R
variables of type <i,t> : N
variables of type <<e,t>,t> : Q Z
variables of type <<i,t>,t> : U
variables of type <v,<<e,t>,t>>: S
constants of type e : john mary brutus caesar the-forum the-kitchen the-village the-manuscript his-dog the-water
constants of type <v,t> : miaow laugh love rain find enter stab visit visited eat ate caught walk kiss invite taught covered-over
constants of type <v,e> : arg1 arg2 arg3 ag th coverer coveree goal loc with to
constants of type <v,i> : time
constants of type <e,t> :  atom corner knife cat mouse forum diplomat country apple flea boy girl party copy-editor mistake video-game quarterback quilt-patch workbench bedspread play politician city person donkey
constants of type t : true
constants of type e : now time-index last-year
constants of type s : w0
constants of type <v,s> : world
constants of type m : heartily loudly
constants of type <v,m> : manner
constants of type <e,e> : in from-arg1 from-arg2
constants of type <i,i> : july last-year-old the-year-before
variables of type <i,<<v,t>,t>> : k

variables of type <<et,t>,<<vt,t>,<vt,t>>> : T

# Plurality, from Landman ch.6


# Part-of 
constants of type <e*e,t>: ipart-of is-atomic-part-of
constants of type <v*v,t>: epart-of is-atomic-epart-of

constants of type <i*i,t>: temporal-part-of

# Sum
constants of type <e*e,e>: isum-of
constants of type <v*v,v>: esum-of

# Generalized sum and sigma
constants of type <<e,t>,e> : σ ibig-sum-of
constants of type <<v,t>,v> : ebig-sum-of

# Groups: igroup-of is the uparrow, iun-group-of is the downarrow
constants of type <e,e>: igroup-of iun-group-of

# Atoms and cardinality
# is-atomic-part-of is another notation for iatoms-of
constants of type <e,<e,t>>: iatoms-of 
constants of type <v,<v,t>>: eatoms-of
constants of type <e,n>: card


# Singularization and pluralization (and distributivity operator)
constants of type <<e,t>,<e,t>>: iatoms-in istar idist
constants of type <<v,t>,<v,t>>: eatoms-in estar edist

# Plural roles
constants of type <<v,e>,<v,e>>: rstar

# The H' function from Krifka '98 that maps events to their runtime in hours
constants of type <v,n>: H

define miaow : Lf.Ee[miaow(e) & f(e)]
define laugh,laughed : Lf.Ee[laugh(e) & f(e)]
define love : Lf.Ee[love(e) & f(e)]
define rain : Lf.Ee[rain(e) & f(e)]
define find : Lf.Ee[find(e) & f(e)]
define enter : Lf.Ee[enter(e) & f(e)]
define stab : Lf.Ee[stab(e) & f(e)]
define visit : Lf.Ee.[visit(e) & f(e)]
define visited : Lf.Ee.[visited(e) & f(e)]
define eat : Lf.Ee.[eat(e) & f(e)]
define ate : Lf.Ee.[ate(e) & f(e)]
define caught : Lf.Ee.[caught(e) & f(e)]
define walk : Lf.Ee.[walk(e) & f(e)]
define kiss : Lf.Ee.[kiss(e) & f(e)]
define kissed : Lf.Ee.[kissed(e) & f(e)]
define invite,invited : Lf.Ee.[invite(e) & f(e)]
define taught : Lf.Ee.[taught(e) & f(e)]
define spy-on : Lf.Ee.[spy-on(e) & f(e)]
define sleep,sleeps : Lf.Ee.[sleep(e) & f(e)]
define descended-the-mountain : Lf.Ee.[DTM(e) & f(e)]
define see,sees,saw : Lf.Ee.[see(e) & f(e)]
define cover,covers,covered : Lf.Ee.[cover(e) & f(e)]

define it : LV.V
#"it" is vacuous

define past : LV.Lf.V(Le.[f(e) & before(time(e),now)])
define past-closure: LV.[true & V(Le.[before(time(e),now)])]
#define past : LV.Lf.V(Le.[f(e) & time(e) < now])

define arg1 : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & arg1(e) = x]))
define arg2 : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & arg2(e) = x]))
define arg2lift: LQ.LV.LM.Lf.Q(Lx.[M(V) (Le.[f(e) & (arg2(e) = x)])])
define arg3 : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & arg3(e) = x]))
define ag : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & ag(e) = x]))
define th : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & th(e) = x]))
define coverer : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & coverer(e) = x]))
define coveree : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & coveree(e) = x]))
define to : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & goal(e) = x]))
define in,on : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (loc(e) = x)]))
define with : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (with(e) = x)]))
#define in : LQ.LV.Lf.Q(Lx.[l(f) & [Ae[f(e) -> (loc(e) = x)]]])
define in-tmp : LU.LV.Lf.U(Lt.V(Le.[f(e) & (time(e) = t)]))
define in-july : LV.Lf.V(Le.[f(e) & (time(e) = t)])
define july : Lt.LN.N(july(t))
define july-detailed : LP.P(Ix.[in-july(x) & subinterval(x,time-index)])
#this is a slight hack due to software limitations: the variable x should really be of type i for times. But the predefined iota operator I will only accept individuals.

define last-year : Lk.Lf.Et.k(the-year-before(t))(f)
define last-year-old : Lt.LP.P(last-year-old(t))
#define last-year : LV.Lf.V(Le.[f(e) & (time(e) = last-year)])

define john : LP.P(john)
define mary : LP.P(mary)
define brutus : LP.P(brutus)
define caesar : LP.P(caesar)

#define tourists : LP.Ex.[tourist(x)&P(x)]
define everybody : LP.Ax.[person(x) -> P(x)]
define somebody : LP.Ex.[person(x) -> P(x)]
define nobody : LP.~Ex.[person(x) -> P(x)]

#define closure: LV.Ee.V(Le'.[e'=e])
define closure: Le.true
define modal-closure: LV.Lf.V(Le.[f(e) & world(e) = w0])
define existential-closure: LV.V(Le.true)
define temporal-closure: LV.Et.V(Le.[time(e) = t])
define temporal-closure-hack : Lk.Et.k(t)(Le.[time(e)=t])
define temporal-existential: LV.Lf.Et.V(Le.[f(e) & time(e) = t])
#should be time(e) subset of t to model temporal closure axiom

define heartily : LV.Lf.V(Le.[f(e) & manner(e) = heartily]) 
define loudly : LV.Lf.V(Le.[f(e) & manner(e) = loudly]) 
#define heartily : LV.Lf.[l(f) & Ae[f(e) -> (manner(e) = heartily)]]

#define everycorner : LP.Ax.[corner(x)->P(x)]
define everycorner : LP.Ax.P(x)
define every : LR.LP.Ax.[R(x)->P(x)]
define a,an,some : LR.LP.Ex.[R(x) & P(x)]

define corner : corner
define knife : knife
define cat : cat
define mouse : mouse
define forum : forum
define diplomat : diplomat
define country : country
define apple : apple
define flea,fleas : flea
define donkey,donkeys : donkey
define boy : boy
define girl : girl
define party : party
define copy-editor : copy-editor
define mistake : mistake
define video-game : video-game
define quarterback : quarterback
define quilt-patch: quilt-patch
define workbench: workbench
define bedspread: bedspread
define play : play
define politician : politician
define city : city
define person : person

define apples : LP.Ex.[apple(x)&P(x)]

define the-forum : LP.P(the-forum)
define the-kitchen : LP.P(the-kitchen)
define his-dog : LP.P(his-dog)
define the-water : LP.P(the-water)
define the-village : LP.P(the-village)

define in-the-manuscript: Lx.[in(x) = the-manuscript]
define twice : LV.Lf.two[Le.V(Le'[e'=e & f(e')])]
define never: LV.Lf.~Ee.V(Le'[e'=e & f(e')]) 
# never here just says there are no events of the specified kind. A contextual restriction should normally be invoked.

define not: LV.Lf.~V(Le[f(e)]) 


# define not: LV.Lf.~Ee.V(Le'[e'=e & f(e')]) 
# means the same as never
# wrong results when scoping above a universal quantifier

define krifka-not: LV.Lf.Ee.[mxe(e) & f(e) & ~V(Le'[part-of(e',e)])]

define did: LV.V

define for-two-hours: LV.Lf.Et.[hours(t) = 2 & At'.[temporal-part-of(t',t) -> V(Le.[f(e) & time(e)=t'])]]




define for-an-hour: LV.Lf.V(Le.[f(e) & H(e)=1 & [Ee'.part-of(e',e)] & Ae'.[part-of(e',e) -> V(Le''.[f(e')&e''=e'])]])
define for-years: LV.Lf.V(Le.[f(e) & has-years-runtime(e) & [Ee'.part-of(e',e)] & Ae'.[part-of(e',e) -> V(Le''.[f(e)&e''=e'])]])

define an-hour: LP.Ex.[hour(x) & card(x)=1 & P(x)]
define for: LQ.LV.Lf.Q(Lx.V(Le.[f(e) & time(e) = x & [Ey.part-of(y,x)] & Ay.[part-of(y,x) -> V(Le'.[f(e') & part-of(e',e) & time(e')=y])]]))

# Plurals, from Landman ch.6

# Plural suffix
define plural,s,es : LP.istar(P)

# Quantifiers
define two-group: LR.LP.EX.[R(X) & card(X)=2 & P(igroup-of(X))]
define two-sum: LR.LP.EX.[R(X) & card(X)=2 & P(X)]
define three-group: LR.LP.EX.[R(X) & card(X)=3 & P(igroup-of(X))]
define three-sum: LR.LP.EX.[R(X) & card(X)=3 & P(X)]
define four-group: LR.LP.EX.[R(X) & card(X)=4 & P(igroup-of(X))]
define four-sum: LR.LP.EX.[R(X) & card(X)=4 & P(X)]
define three-hundred-sum: LR.LP.EX.[R(X) & card(X)=300 & P(X)]
define every-group: LR.LP.EX.[AY.[R(Y) <-> is-atomic-part-of(Y,iungroup-of(X))] & P(X)]
define every-sum: LR.LP.EX.[AY.[R(Y) <-> is-atomic-part-of(Y,X)] & P(X)]

define star-arg1 : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(arg1)(e) = x)]))
define star-arg2 : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(arg2)(e) = x)]))
define star-arg3 : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(arg3)(e) = x)]))
define star-ag : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(ag)(e) = x)]))
define star-th : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(th)(e) = x)]))
define star-coverer : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(coverer)(e) = x)]))
define star-coveree : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(coveree)(e) = x)]))
define star-with : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(with)(e) = x)]))
define star-to : LQ.LV.Lf.Q(Lx.V(Le.[f(e) & (rstar(to)(e) = x)]))


define star-walk : Lf.Ee.[estar(walk)(e) & f(e)]
define star-kiss : Lf.Ee.[estar(kiss)(e) & f(e)]
define star-invite,star-invited : Lf.Ee.[estar(invite)(e) & f(e)]
define star-caught : Lf.Ee.[estar(caught)(e) & f(e)]
define star-taught : Lf.Ee.[estar(taught)(e) & f(e)]
define star-covered-over : Lf.Ee.[estar(covered-over)(e) & f(e)]

define NQI: LQ.LP.Q(P)
define SQI,dist : LQ.LP.Q(Lx.Ay[is-atomic-part-of(y,x)->P(y)])
# alternative definition (equivalent but less perspicuous, see Landman p.194f.):
# define SQI: LQ.LP.Q(istar(Lx.[atom(x) & P(x)]))



########### nuclear physics: an optional way to build up the verb radical

define caught-root: caught
# i.e. Le.caught(e)
define op: Lg.LV.Lf.V(Le.[f(e)&g(e)])
define star-op: Lg.LV.Lf.V(Le.[f(e) & estar(g)(e)])
# op is like the arg1, arg2 etc. operators.
# star-op is like them too but also introduces pluralization.
define core: Lf.Ee.f(e)


########### alternative that makes things look similar to the rest

#define caught-root: Lf.Ee.[f(e) & caught(e)]
#define op: LQ_<<v,t>,t>.LV.Lf.Q(λe'.V(Le.[f(e) & (e = e')]))
#define core: Lf.Ee.f(e)




########### various attempts at doing inverse linking

define person-from: LQ.Lx.Q(Ly.[person(x) & from(x,y)])
#define from: LQ.LP.Lx.[P(x) & Q(Ly.from(x,y))]
#define from: LQ.LZ.LP.Z(Lx.[P(x) & [Q(Ly.from(x,y))]])
define from: LP.Ex[P(x)]
define from-arg1: λQ.λZ.λP.Q(λx.Z(λy.[P(y) ∧ (y = x)]))
define from-arg2: λQ.λZ.λP.Q(λx.Z(λy.[P(y) ∧ from(y,x)]))


########### bare plurals

define bare-plural : LP.LT.LV.Lf.V(Le.Ex[P(x) & (T(LP.P(x)) (Lf'.f'(e)) (Le'.f(e')))])


#define verbal-SQI: LV.Lf.Ee.[f(e) & Ae'[epart-of(e',e) -> V(Le''.e''=e')]]

define three-boys: LP.EX[three-boys(X) & P(X)]
define four-girls: LP.EY[four-girls(Y) & P(Y)]

define two-workbenches: LP.Ex[two-workbenches(x) & P(x)]
define two-bedspreads: LP.Ey[two-bedspreads(y) & P(y)]
define three-hundred-quilts: LP.Ez[three-hundred-quilts(z) & P(z)]

define adverbial-loc: LQ.LV.Lf.Ee[f(e) & Q(Lx.V(Le'.[epart-of(e',e) & (loc(e') = x)]))]

define loc-sepdist: LQ.LV.Lf.Ee[f(e) & Q(Lx.Ay.[is-atomic-part-of(y,x) -> V(Le'.[epart-of(e',e) & (rstar(loc)(e') = y)])])]
define arg1-sepdist: LQ.LV.Lf.Ee[f(e) & Q(Lx.Ay.[is-atomic-part-of(y,x) -> V(Le'.[epart-of(e',e) & (rstar(arg1)(e') = y)])])]

define arg2-sepdist: LQ.LV.Lf.Ee[f(e) & Q(Lx.Ay.[is-atomic-part-of(y,x) -> V(Le'.[epart-of(e',e) & (rstar(arg2)(e') = y)])])]

define sepdist: LT.LQ.LV.Lf.Ee[f(e) & Q(Lx.Ay.[is-atomic-part-of(y,x) -> V(Le'.[epart-of(e',e) & (T(LP.P(y)) (Lf'.f'(e')) (Le''.true))])])]
#define for-part1: LT.LQ.LV.Lf.Q(Lx.V(Le.[f(e) & time(e) = x & [Ey.part-of(y,x)] & Ay.[part-of(y,x) -> V(Le'.[f(e') & part-of(e',e) & time(e')=y])]]))
#define for-part2: LQ.LV.Lf.Q(Lx.V(Le.[f(e) & time(e) = x & [Ey.part-of(y,x)] & Ay.[part-of(y,x) -> V(Le'.[f(e') & part-of(e',e) & time(e')=y])]]))

define for-sepdist: LQ.LV.Lf.Ee[f(e) & Q(Lx.[Ay.[is-atomic-part-of(y,x) -> V(Le'.[epart-of(e',e) & (time(e') = y)])]])]


define girls: LV.Lf.V(Le.[f(e) & EX(girls(X) & (th(e) = X))])

###################################################################################################

exercise tree
title Linking structures


[.CP past-closure [not [ [ john ag ] laugh ] ] ]


instructions John didn't laugh.
[.CP closure [ [ john ag ] [ not laugh ] ] ]


instructions For two hours it was not the case that John laughed.
[.CP past-closure [ [ john ag ] [ [ not laugh ] for-two-hours ] ] ]


instructions For two hours John laughed.
[.CP past-closure [ [ [ john ag ]  laugh ] for-two-hours ] ]


instructions For two hours it was not the case that John laughed.
[.CP past-closure [ [ [ john ag ] [ not laugh ] ] for-two-hours ] ]



instructions It's not the case that John laughed for two hours.
[.CP past-closure [.IP [.DP john ag ] [.VP not [.VP laugh for-two-hours ] ] ] ]

[.CP closure  [.IP [.DP [ a diplomat ] arg1 ] [.VP [ not visited ]  [.DP [ every country ]  arg2 ] ] ] ]


[.CP closure [.IP [.DP [ a diplomat ] arg1 ] [ not [.VP visited  [.DP [ every country ]  arg2 ] ] ] ] ]




[.CP closure [.IP [.DP [ a diplomat ] arg1 ] [.VP visited  [.DP [ every country ]  arg2 ] ] ] ]


[.CP closure [.IP [.DP [ a diplomat ] arg1 ] [.VP visited  [.DP [ every country ]  arg2lift ] ] ] ]

[.CP closure [.IP [.IP [.DP [ a diplomat ] arg1 ] visited ] [.DP [ every country ]  arg2 ] ] ]


instructions Reading 8: Ds-Do: apply sum subject and sum object in any order (scopeless reading so no interaction)
[ closure  [.S [.DP john star-arg1 ] [ [.VP star-invited  girls ] for-an-hour ] ] ]

#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP [ four-sum [ girl s ] ] star-arg2 ] ] ] ] 

#[ closure [.S [.DP ag john ] [.VP [ invited [.DP th mary ] ] [ for-sepdist an-hour ] ] ] ]

#[ closure  [.S [.DP ag three-boys ] [.VP [ invited [.DP th four-girls ] ] [ for-sepdist an-hour ] ] ] ]

#[ closure  [.S [.DP ag everybody ] [.VP laughed  [ for an-hour ] ] ] ]


#[ closure  [ for-an-hour [.S [.DP three-boys arg1 ] [.VP [ invited ] [.DP four-girls arg2 ] ] ] ]  ]

[ closure  [.S [.DP mary arg1 ]  laughed  ] ]

[ closure  [.S [.DP mary arg1 ]  [ laugh past ]  ] ]

[ closure  [.S [.DP everybody arg1 ]  laughed  ] ]


# My own "not"
#[ closure [ [ not [ [.DP john arg1 ] [ (did) laugh ] ] ] for-an-hour ] ]


# Try out Krifka-inspired "not" with PP modification: We need to let it scope
# over the subject.
#[ closure [ [ krifka-not [ [.DP john arg1 ] [ (did) laugh ] ] ] for-an-hour ] ]

# If we let it scope under the subject, then the subject is asserted to be the arg1
# of the MXE event introduced by "not".
#[ closure [ [ [.DP john arg1 ] [ (did) [ krifka-not laugh ] ] ]  for-an-hour ] ]

# Try out my own "not"
#[ closure [ [.DP john arg1 ] [ (did) [ not laugh ] ] ] ]

# Find out what happens if adverbial-SQI is applied on the higher argument instead of normal SQI.
#[ closure  [.S [.DP arg1-sepdist three-boys ] [.VP star-invited  [ star-th four-girls ] ] ] ] 
# Result is the same as with normal SQI if we assume closure of events under sum. 

# Isolate arg1 and sepdist
#[ closure  [.S [.DP [ arg1  sepdist ] three-boys ] [.VP star-invited  [ star-th four-girls ] ] ] ] 


# Find out what happen if SQI is applied on the lower argument.
#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP [ SQI [ four-sum [ girl s ] ] ] star-arg2 ] ] ] ] 
# Result: ∃x [(istar(boy) (x)) ∧ (card(x) = 3) ∧ ∃xʹ [(istar(girl) (xʹ)) ∧ (card(xʹ) = 4) ∧ 
# ∀y[is-atomic-part-of(y,xʹ) → ∃e [(estar(invite) (e)) ∧ true ∧ ((rstar(arg1) (e)) = x) ∧ ((rstar(arg2) (e)) = y)]]]]

# Find out what happen if adverbial-SQI is applied on the lower argument.
#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP arg2-sepdist [ four-sum [ girl s ] ] ] ] ] ]


# Comparison: SQI on the higher argument
#[ closure  [.S [.DP [ SQI [ three-sum [ boy s ] ] ]  star-arg1 ] [.VP star-invited [.DP [ four-sum [ girl s ] ] star-arg2 ] ] ] ] 
# Result: ∃x [(istar(boy) (x)) ∧ (card(x) = 3) 
# ∧ ∀y[is-atomic-part-of(y,x) → ∃x [(istar(girl) (x)) ∧ (card(x) = 4) ∧ ∃e [(estar(invite) (e)) ∧ true ∧ ((rstar(arg1) (e)) = y) ∧ ((rstar(arg2) (e)) = x)]]]]
#  There are three boys and four girls and each of the girls got invited by all of the boys (branching reading)

# Add a third argument
#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [ [.VP star-invited [.DP star-to [ two-sum [ party s ] ] ] ] [.DP [ SQI [ four-sum [ girl s ] ] ] star-arg2 ] ] ] ] 
# Result: There are three boys and four girls and each of the girls got invited by all of the boys to two parties each 

# Find out what happens if we replace SQI by adverbial-SQI
#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP arg2-sepdist [ four-sum [ girl s ] ] ]  ] ] ] 
# ∃x [(istar(boy) (x)) ∧ (card(x) = 3) ∧ ∃e[true ∧ ((rstar(arg1) (e)) = x) ∧ ∃x [(istar(girl) (x)) ∧ (card(x) = 4) ∧
# ∀y [is-atomic-part-of(y,x) → ∃eʹ [(estar(invite) (eʹ)) ∧ epart-of(eʹ,e) ∧ (arg2(eʹ) = y)]]]]]
# This means: Three boys between them issued invitations, and four girls received each ... seems to mean the same as dropping arg2-sepdist altogether

# Now add a quantifier that's dependent on one of the two
#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [ [.VP star-invited [.DP star-to [ two-sum [ party s ] ] ] ] [.DP arg2-sepdist [ four-sum [ girl s ] ] ] ] ] ]


# Suppose DE quantifiers have obligatory SQI. Then I could drop maximality restrictions I think and make SQI erase the existential quantifier over sums.
# But this doesn't seem to be the case: Less than 3% of all Americans own half the wealth (Buering)

#[ closure [.vP [.DP  three-hundred-quilts  th ] [.VP [.V' covered [.PP with two-bedspreads ] ] [.DP  two-workbenches loc-sepdist ] ] ] ] 

#[ closure [.vP [.DP  three-hundred-quilts  th ] [.VP [.V' covered [.PP with two-bedspreads ] ] [.DP  [ SQI two-workbenches ] adverbial-loc ] ] ] ] 


#[ closure  [ [ john arg1] [ [.VP ate [ [ bare-plural [ apple s ] ] star-arg2 ] ] for-an-hour ] ] ] 


#instructions Bare plural forces donkeys to take narrow scope.
#[ closure  [.S  [.DP [ bare-plural [ donkey s ] ] star-arg1 ]  [.VP descended-the-mountain  for-an-hour ] ] ]

#[ closure  [.S  [.DP [ bare-plural [ donkey s ] ] star-arg1 ]  [.VP saw [.DP everybody arg2 ] ] ] ]

#[ closure  [.S  [.DP [ some [ donkey s ] ] star-arg1 ]  [.VP descended-the-mountain  for-an-hour ] ] ]

#[ closure  [.S  [ [.DP [ some [ donkey s ] ] SQI ] star-arg1 ] [.VP descended-the-mountain  for-an-hour ] ] ]


#[ [ [ [ some2 person ] myarg1 ] [ core [ from2 [ every2 city ] ] ] ] arg2 ]

#[ closure [ [ [ some person ] arg1 ] sleeps ] ]

#[ [ some [ person [ from [ every city ] ] ] ] arg2 ]

#[ closure [.S [.DP [ [ from-arg1 [ some person ] ] [ from [ from-arg2 [ every city ] ] ] ] arg1 ] [.VP sleeps ] ] ]

#[ closure [.S [.DP [ [ [ from-arg1 [ some person ] ] from ] [ from-arg2 [ every city ] ] ] arg1 ] [.VP sleeps ] ] ]


#[ closure [.S [.DP [ [ some person ] [ from [ every city ] ] ] arg1 ] [.VP sleeps ] ] ]

#[ closure [.S [.DP [ [ [ some person ] from ] [ every city ] ] arg1 ] [.VP sleeps ] ] ]


#[ closure [ [ [ two-sum [ politician s ] ] star-arg1 ] [ spy-on [ [ [ some [ person [ from [ every city ] ] ] ] arg2 ] ] ] ] ]

#[ closure  [.S [.DP [ three-sum [ copy-editor s ] ]  star-arg1 ] [.VP star-caught [.DP [ every-sum [ mistake in-the-manuscript ] ] star-arg2 ] ] ] ]

#[ closure [.vP [.DP [ three-sum [.NP video-game s ] ] star-arg1 ] [.v' (v) [.VP [.DP star-arg3 [.NP every quarterback ] ] [.V' star-taught [.DP [ two-sum [.NP play s ] ] star-arg2 ] ] ] ] ] ]

#[ closure [.S [.DP [ three-sum [ video-game s ] ] star-arg1 ] [ [.VP star-taught [.DP [ two-sum [ play s ] ] star-arg2 ] ] [.PP star-to [.DP every quarterback ] ] ] ] ]


#[ closure  [.S [.DP [ every cat ] arg1] [.VP [ [ caught-root star-op ] core ] [.DP [ a mouse ] arg2 ] ] ] ]


#[ closure  [.S [.DP [ every cat ] arg1] [.VP caught [.DP [ a mouse ] arg2 ] ] ] ]

#[ closure  [.S [.DP everybody arg1] [.VP laugh twice ] ] ] 

#[ closure [.S [.DP [ john arg1 ] [.VP [.VP kiss [.DP [ [ every girl ] arg2 ] ] ] for-an-hour ] ] ] ]

#[ closure [ [.S [.DP [ john arg1 ] [.VP [.VP kiss [.DP [ [ every girl ] arg2 ] ] ] ] ] ] for-an-hour ] 	]


#[ closure [.S [.DP [ john arg1 ] [.VP [.VP enter [.DP [ the-water arg2 ] ] ] for-an-hour ] ] ] ]

#[ closure  [.S [.DP [ a flea ] arg2] [ [.DP john arg1 ] [ [.VP find [.PP on his-dog  ] ] for-an-hour ] ] ]  ]

#[ closure  [.S  [.DP john arg1 ] [ [.VP [.VP find [ [ bare-plural fleas ] arg2 ] ] [.PP on [ his-dog ]  ] ] for-an-hour ] ] ]  

#instructions this one has "an apple" with low scope, like a bare plural.
#[ closure  [.S [.DP john arg1] [ [.VP ate [.DP [ an apple] arg2 ] ] for-an-hour ] ] ] 

#[ closure  [ [ john arg1] [ [.VP ate [ apples arg2 ] ] for-an-hour ] ] ] 

 [.CP closure [.IP [.DP john arg1 ] [.VP kissed  [.DP [ every girl ]  arg2 ] ] ] ]


#[ closure [ modal-closure [.S [.DP [ a diplomat ] arg1] [.VP [.VP temporal-existential [.VP visit past ] ] [.DP [ every country ] arg2 ] ] ] ] ]


[ temporal-closure [ modal-closure [.S [.DP [ every cat ] arg1] [.VP miaow past ] ] ] ] 

[ temporal-closure [ modal-closure [.S [.DP [ every cat ] arg1] [.VP [.VP miaow past ] [.PP in the-kitchen  ] ] ] ] ] 

[ temporal-closure [ modal-closure [.S [.DP [ every cat ] arg1] [.VP [.VP miaow past ] [.AdvP loudly  ] ] ] ] ] 

[ temporal-closure [ modal-closure [.S [.DP [ every cat ] arg1] [.VP [.VP [.VP miaow past ] [.AdvP loudly ] ] [.PP in the-kitchen  ] ] ] ] ] 


[ closure [ last-year [ 1<i> [.S it [.VP [.VP rain past ] [.PP in-tmp [ july t<i>_1 ] ] ] ] ] ] ]

#[ temporal-closure-hack [ 1  [.S it [.VP [.VP rain past ] [.PP in-tmp [ july t_1 ] ] ] ] ] ]

#doesn't work
#[ temporal-closure-hack [ 1 [ [ in-tmp [ last-year-old t_1 ] ] [ modal-closure  [.S it [.VP [.VP rain past ] [.PP in-tmp [ july t_1 ] ] ] ] ] ] ]  ]

[ closure [.S [.DP brutus arg1] [.VP [.VP [.VP [ stab past ] [.DP caesar arg2 ] ] [.PP with [.DP a knife ] ] ] [.PP in the-forum ] ] ] ] 

#[ temporal-closure [ modal-closure [.S [.DP [ a diplomat ] arg1] [.VP [ visit past ] [.DP [ every country ] arg2 ] ] ] ] ]

#[ temporal-closure [ modal-closure [.S' [.DP [ every country ] arg2 ] [.S [.DP [ a diplomat ] arg1] [.VP [ visit past ] ] ] ] ] ]


#[ temporal-closure [ modal-closure [.S [.DP everybody arg1] [.VP [.VP laugh ] [.PP in [.DP every corner ] ] ] ] ] ] 


#[ temporal-closure [ modal-closure [.S [.DP everybody arg1] [.VP laugh past] ] ] ] 

#[ temporal-closure [ modal-closure [.S [.DP everybody arg1] [.VP love [ somebody arg2 ] ] ] ] ]


#[ temporal-closure [ modal-closure [.S [.DP mary arg1] [.VP [.VP [.VP laugh past] heartily ] [.PP in everycorner ] ] ] ] ]


#[ closure [.S [.DP everybody arg1] [.VP [.VP laugh past] heartily ] ] ]

#[ closure  [.S [.DP everybody arg1] [.VP laugh twice ] ] ]

#[ closure  [.S [.DP everybody arg1] [.VP never laugh ] ] ] 

#[ closure  [.S [.DP john arg1] [.VP eat [.DP [ an apple] arg2 ] ] ] ] 

# narrow scope of "an apple"
#[ closure  [.S [.DP john arg1] [.VP did [.VP not [.VP eat [.DP [ an apple] arg2 ] ] ] ] ] ]

# plurals

#instructions Reading 1: Cs-Co: apply group subject and group object in any order (scopeless reading so no interaction)
#[ closure  [.S [.DP [ three-group [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP [ four-group [ girl s ] ] star-arg2 ] ] ] ] 

#instructions Reading 2: Ds(Co): apply group object, then apply sum subject with SQI
#[ closure  [.S [.DP [ [ three-sum [ boy s ] ] SQI ]  star-arg1 ] [.VP star-invited [.DP [ four-group [ girl s ] ] star-arg2 ] ] ] ] 

# try sth out
#[ closure  [.S [.DP [ [ three-sum [ boy s ] ] SQI ]  star-arg1 ] [.VP star-invited [.DP [ four-group [ girl s ] ] star-arg2 ] ] ] ] 


#instructions Reading 3: Do(Cs): apply group subject, then apply sum object with SQI
#instructions Inverse scope reading, empirically hard to get
#[ closure  [.S [.DP [ [ four-sum [ girl s ] ] SQI ] star-arg2 ] [ [.DP [ three-group [ boy s ] ] star-arg1 ] [.VP star-invited ] ] ] ]

#instructions Reading 4: Ds(Do): apply sum object, then apply sum subject with SQI
#[ closure  [.S [.DP [ [ three-sum [ boy s ] ] SQI ]  star-arg1 ] [.VP star-invited [.DP [ four-sum [ girl s ] ] star-arg2 ] ] ] ] 

#instructions Reading 5: Do(Ds): apply sum subject, then apply sum object with SQI
#instructions Inverse scope reading, empirically hard to get
#[ closure  [.S [ [.DP [ four-sum [ girl s ] ] SQI ] star-arg2 ] [ [.DP [ three-sum [ boy s ] ] star-arg1 ] [.VP star-invited ] ] ] ]

#instructions Reading 6: Ds-Co: apply sum subject and group object in any order (scopeless reading so no interaction)
#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP [ four-group [ girl s ] ] star-arg2 ] ] ] ] 

#instructions Reading 7: Cs-Do: apply group subject and sum object in any order (scopeless reading so no interaction)
#[ closure  [.S [.DP [ three-group [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP [ four-sum [ girl s ] ] star-arg2 ] ] ] ] 

#instructions Reading 8: Ds-Do: apply sum subject and sum object in any order (scopeless reading so no interaction)
#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP [ four-sum [ girl s ] ] star-arg2 ] ] ] ] 

#instructions Reading 9: DsxDo (branching reading) the way Landman does it
#instructions Start with a sum object and a sum subject, apply one of them with SQI, and after that apply the other with NQI.
#[ closure  [.S [.DP [ [ three-sum [ boy s ] ] NQI ]  star-arg1 ] [.VP star-invited [.DP [ [ four-sum [ girl s ] ] SQI ] star-arg2 ] ] ] ] 

#instructions Reading 9: DsxDo (branching reading) simplified
#instructions Start with a sum object and a sum subject, apply one of them with SQI, and after that apply the other. We can drop NQI because in our framework it's vacuous anyway.
#[ closure  [.S [.DP [ three-sum [ boy s ] ]  star-arg1 ] [.VP star-invited [.DP [ [ four-sum [ girl s ] ] SQI ] star-arg2 ] ] ] ] 

