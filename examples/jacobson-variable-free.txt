Variable-free semantics, Jacobson style

# (c) Lucas Champollion 2008

# The following directive instructs the program to
# interpret multiple-letter constants and variables
# properly.

multiple letter identifiers

# "use rule" directives are for tree evaluation exercises.
# They indicate which composition rules are available
# at nonterminals.

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction

variables of type e: x y z
variables of type v: e
variables of type i: t
constants of type e: j m b
constants of type <v,t>: true
variables of type <e,e>: f g
constants of type <e,e>: the-mother-of the-dog-of the-paycheck-of the-mistress-of the-wife-of
variables of type <e,t>: P
variables of type <v,t>: V
constants of type <i,t>: year in-july
constants of type <e,t>: boy man woman american win
variables of type <e,<e,t>>: R
variables of type <e,<e,<<v,t>,t>>>: S
constants of type <e,<e,t>>: love hate meet lose
constants of type <e,<e,<e,t>>>: give
constants of type <e,<e,<v,t>>>: love2 meet2
variables of type <<e,t>,t>: Q
variables of type t: p
variables of type <t,<e,t>>: T
constants of type <t,<e,t>>: think said
variables of type <<e,t>,<e,t>>: U
variables of type <<e,e>,<e,t>>: Z
variables of type <e,<<e,e>,<e,t>>>: W
variables of type <<<e,e>,<e,t>>,<e,t>>: X
variables of type <<e,t>,<e,<e,t>>>: Y
variables of type <<e,e>,t>: F
variables of type <<e,e>,<e,e>>: D
variables of type <e,<<e,t>,t>>: F
variables of type <<<e,t>,t>,<e,t>>: G
variables of type <<e,e>,<e,<<e,t>,t>>>: H
variables of type <<e,<<e,t>,t>>,<e,t>>: J
constants of type <v,i>: tau
constants of type <i*i,t>: included-in-july-of

define lift-e: Lx.LP.P(x)
define lift-ee: Lf.LZ.Z(the-mother-of)
define g0-et-e: LP.Lf.Lx.P(f(x))
#The first type is the first argument; the second type is the argument no 3+n, 
#where n is the number after the g; eg. g0-et-e means that the first argument
#is of type et, there are no extra inserted arguments, and the third arg is 
#of type e.
define g0-eet-e: LR.Lf.Ly.R(f(y))
define g1-eet-e: LR.Ly.Lf.Lz.R(y)(f(z))
define g0-ett-e: LQ.LR.Ly.Q(R(y))
define g0-etet-e: LU.LR.Ly.U(R(y))
define g0-eeetet-e: LX.LW.Lx.X(W(x))
define g0-tet-e: LT.LP.Lx.T(P(x))
define g0-eeet-maybe-wrong: LZ.LQ.Lf.Q(Z(f))
# this g0-eeet might be wrong, just a stand-in for fn. composition
define g0-eeet-e: LZ.LD.Lg.Z(D(g))
# g0-eeet used in Jacobson 2000 page 134
define g0-eeeet-e: LZ_<ee,<e,et>>.LD.Lg.Z(D(g))
define g0-ee-e: Lg.Lf.Lx.g(f(x))
# g0-ee used for paycheck pronouns in Jacobson 2000
define g0-eett-ee: LF.Lf.Lx.F(f(x))
# used for paycheck readings of "someone else" in Kubota and Uegaki
define g0-ett-ee: LQ.LZ.Lf.Q(Z(f))
# used for paycheck pronouns in Jacobson 2000 page 134
define g0-ettet-e: LG.LF.Lz.G(F(z))
define g0-eettet-ee: LJ.LH.Lf.J(H(f))
define g0-ett-eeet: LQ.LZ.Lf.Q(Z(f))
# the three previous ones used in Kubota and Uegaki 2011
define g0-tet-i: LT.LV_<it>.Lt.T(V(t))
define g0-ett-i: LQ_<et,t>.LT_<i,et>.Lt.Q(T(t))
# the last two needed for my temporal stuff
define z-eet: LR.Lf.Lx.R(f(x))(x)
define z-eeet-gen: LR_<e,<e,<et>>>.Lf.Ly.Lx.R(f(x))(y)(x)
#this generalized definition of z is defined in Jacobson 1999, page 134. It's used to skip over an argument position in "John gave his paycheck to his wife", to make sure that "his paycheck" is not bound by "his wife".
define z-eevt: LS_<e,<e,<vt>>>.Lf.Lx.S(f(x))(x)
define z-eevtt: LS_<e,<e,<vt,t>>>.Lf.Lx.S(f(x))(x)
# Davidsonian version
define z-tet: LT.LP.Lx.T(P(x))(x)
define z-eteet: LY.LR.Ly.Lz.Y(R(z))(y)(z)
define z-ettet: LG.LF.Lx.G(F(x))(x)
define love,loves,loved: Ly.Lx.love(x)(y)
# convention: love(x)(y) means x loves y. Note that in Kubota and Uegaki, 
# loves(x)(y) means y loves x. Keep this in mind esp as you read the argraising rule.
define love2,loves2,loved2: Ly.Lx.Le[love2(x)(y)(e)]
define meet2,meets2,met2: Ly.Lx.Le[meet2(x)(y)(e)]
# Davidsonian event argument, with existential quantifier as in Landman
define love3,loves3,loved3: Ly.Lx.LV.Ee.[love2(x)(y)(e) & V(e)]
# Davidsonian event argument, with existential quantifier as in Champollion 2010
define win,wins,won: Lx.win(x)
define hate,hates,hated: Ly.Lx.hate(x)(y)
define meet,meets,met: Ly.Lx.meet(x)(y)
define lose,loses,lost: Ly.Lx.lose(x)(y)
define give,gives,gave: Lz.Ly.Lx.give(x)(z)(y)
define John,john: j
define Mary,mary: m
define Bill,bill: b
define him,her,he,she,it,He,She,It,himself,herself: Lx.x
define his-mother: Lx.the-mother-of(x)
define his-paycheck: Lx.the-paycheck-of(x)
define his-wife: Lx.the-wife-of(x)
define his-mistress: Lx.the-mistress-of(x)
define his-dog: Lx.the-dog-of(x)
define say,says,said: Lp.Lx.said(p)(x)
define think,thinks,thought: Lp.Lx.think(p)(x)
define everybody,Everybody,everyone,Everyone: LP.Ax.P(x)
define Everyyear,everyyear: LP_<it>.At[year(t) -> P(t)]
define every,Every: LP'.LP.Ay.[P'(y)->P(y)]
define some,Some: LP'.LP.Ey.[P'(y)->P(y)]
define boy: Lx.boy(x)
define man: Lx.man(x)
define woman: Lx.woman(x)
define American: Lx.american(x)
define someone-else: Ly.LP.Ex[x!=y & P(x)]
# as in Kubota and Uegaki 2011 (SALT)
define argraise-eet-obj: LR.LQ.Lx.Q(Ly.R(y)(x))
# argument raising of the object position of a transitive verb
# from Hendriks 1993: lifts the type of an argument position of a predicate from individual to GQ
# as introduced in Kubota and Uegaki
define argraise-evt-subj: LX_<e,<v,t>>.LQ.Le.Q(Lx.X(x)(e))
define argraise-evt-event: LX_<e,<v,t>>.LQ_<vt,t>.Lx.Q(Le.X(x)(e))
define argraise-evtt-subj: LX_<e,<vt,t>>.LQ.LV.Q(Lx.X(x)(V))
define argraise-ivt-v: LX_<i,vt>.LQ_<vt,t>.Lt.Q(Le.X(t)(e))
define closure: LV_<vt,t>.V(true)
define existential-closure: LV_<vt>.Ee[V(e)]
define then: LV_<vt>.Lt.Le.[V(e) & tau(e)=t]
define in-July: LV_<vt>.Lt.Le.[V(e) & included-in-july-of(tau(e),t)]
define argraise-ivt-i: LX_<i,vt>.LQ_<vt,t>.Lt_i.Q(Le.X(t)(e))

define op: LQ.LF.Q(Lx.F(Ly.x))

###################################################################################################

exercise tree
title sandbox

instructions 
[ Everyone [ [ z-tet thinks ] [ he [ g0-et-e wins ] ] ] ]


instructions John gave his paycheck to his wife.
[ John [ [ z-eet [ [ z-eeet-gen gave ] his-paycheck ] ] [ (to) his-wife ] ] ]

instructions Bill gave it to his mistress.  (paycheck pronoun)
[ [g0-ett-ee [lift-e Bill ] ] [ [ g [ [ g0-eeeet-e [ z-eeet-gen gave ] ] [ g0-ee-e it ] ] ] [ (to) his-mistress ] ] ]




exercise tree
title Variable-free semantics

#instructions Everytime John loves Mary then. (with events, classical style, then is low)
#[ Everytime [ existential-closure [ argraise-ivt-i [ John [ [ loves2 Mary ] then ] ] ] ] ]

instructions Every year John thinks Bill meets Mary in July. (with events, classical style)
[ Everyyear [ [ g0-ett-i [ lift-e John ] ] [ [ g0-tet-i thinks ] [ existential-closure [ argraise-ivt-i [ [ Bill [ meets2 Mary ] ] in-July ] ] ] ] ] ]


instructions Every year John meets Mary in July. (with events, classical style)
[ Everyyear [ existential-closure [ argraise-ivt-i [ [ John [ meets2 Mary ] ] in-July ] ] ] ]


#[ [ [ Some woman ] op ] [ [ every man ] [ g0-eeet-maybe-wrong [ z-eet loves ] ] ] ]

[ John [ [ z-tet thinks ] [ [ g0-ett-e [ lift-e Mary ] ] [ [ g0-eet-e loves ] him ] ] ] ]

[ [ Every man ] [ [ z-tet thinks ] [ [ g0-ett-e [ lift-e Mary ] ] [ [ g0-eet-e loves ] him ] ] ] ]

[ John [ [ z-tet thinks ] [ [ g0-ett-e [ lift-e Mary ] ] [ [ g0-eet-e loves ] his-mother ] ] ] ]


instructions Derivation 34 for sentence 32: [Every man]_i thinks that [every boy]_j said that his_j mother loves his_i dog.
[ [ Every man ] [ [ z-tet thinks ] [ (that) [ [ g0-ett-e [ every boy ] ] [ [ g0-etet-e [ z-tet said ] ] [ (that) [ [ g0-eeetet-e [ lift-ee his-mother ] ] [ g1-eet-e [ [ g0-eet-e loves ] his-dog ] ] ] ] ] ] ] ] ]

instructions Derivation 35 for sentence 32: [Every man]_i thinks that [every boy]_j said that his_i mother loves his_j dog.
[ [ Every man ] [ [ z-tet thinks ] [ (that) [ [ g0-ett-e [ every boy ] ] [ [ z-eteet [ g0-tet-e said ] ] [ (that) [ [ g0-eeetet-e [ lift-ee his-mother ] ] [ g1-eet-e [ [ g0-eet-e loves ] his-dog ] ] ] ] ] ] ] ] ]

instructions Sentence 38: He_i loves his_i mother. (One pronoun binds another.)

[ He [ g0-et-e [ [ z-eet loves ] his-mother ] ] ]




exercise tree
title Jacobson 2000: Paycheck pronouns

instructions John loves his mother. (ordinary pronouns, no paycheck pronoun.)
[ John [ [ z-eet loves ] his-mother ] ]

instructions Bill hates her.  (paycheck pronoun)
[ [g0-ett-ee [lift-e Bill ] ] [ [g0-eeet-e [z-eet hates ] ] [g0-ee-e her ] ] ]

exercise tree
title Kubota and Uegaki: Nothing else for something else

instructions Mary met him. (wrong derivation without lifting of Mary, yields "He met Mary") 
[ Mary [ [ g0-eet-e met ] him ] ]

instructions Mary met him. (with lifting)
[ [g0-ett-e [ lift-e Mary ] ] [ [ g0-eet-e met ] him ] ]

instructions John loves himself.
[ John [ [z-eet loves ] himself ] ]

instructions Bill lost it.  (paycheck pronoun)
[ [g0-ett-ee [lift-e Bill ] ] [ [g0-eeet-e [z-eet lost ] ] [g0-ee-e it ] ] ]

instructions Everybody loves himself.
[ Everybody [ [z-eet loves ] himself ] ]

instructions Every American loves someone else. (external reading)
[ [g0-ett-e [Every American] ] [ [g0-ettet-e [argraise-eet-obj loves ] ] someone-else ] ]

instructions Every American loves someone else. (internal reading)
[ [Every American] [ [z-ettet [argraise-eet-obj loves ] ] someone-else ] ]

instructions Every American loves someone else. (paycheck reading)
[ [g0-ett-ee [Every American] ] [ [g0-eettet-ee [z-ettet [argraise-eet-obj loves ] ] ] [ g0-eett-ee someone-else ] ] ]



exercise tree
title A Davidsonian variable-free semantics

instructions Everybody loves himself. (with events, classical style)
[ Everybody [ existential-closure [ argraise-evt-event [ [z-eevt loves2 ] himself ] ] ] ]


instructions Everybody loves himself. (with events, Champollion style)
[ closure [ Everybody [ argraise-evtt-subj [ [z-eevtt loves3 ] himself ] ] ] ]

