Lambda Abstraction Bug

constants of type e: john
variables of type e: u-z
variables of type <e,t>: f j


use rule function application
use rule predicate modification
use rule lambda abstraction
use rule non-branching nodes

multiple letter identifiers

multiple reductions on

define offended: Ly[Lx[offend(x,y)]]
define linguist: Lx[linguist(x)]
define John: john
define every: Lf[Lj[Az[f(z) -> j(z)]]]

exercise tree
title Lambda Abstraction Bug
points per exercise 5

instructions Calculate the truth conditions for this tree. (Example (3), Section 7.3. "John offended every linguist.")

[.S [.DP every linguist] [ 1 [.S John [.VP offended t_1]]]]
