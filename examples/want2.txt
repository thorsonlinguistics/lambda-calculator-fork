Presentation on the lexical semantics of "believe" using a doxastic alternative relation

constants of type e : m j
variables of type e : x y
variables of type s : w v
variables of type <e,t> : P-Q
variables of type <s,<e,t>> : Y
variables of type <s,<et,t>> : Z
variables of type t : q
variables of type <s,t> : p p'
variables of type <e,et> : R
constants of type <s*e*s,t> : Dox

multiple letter identifiers

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction
# uncomment the next line if IFA is implemented
use rule intensional function application

define Mary : m
define John : j
define everybody : LwLQ.Ax.[person(w,x)->Q(x)]
define somebody : LwLQ.Ex.[person(w,x) & Q(x)]
define a : LPLQ.Ex.[P(x) & Q(x)]
define asleep: Lx[sleep(w,x)]
define cookie: Lx[cookie(w,x)]
define have: Ly.Lx[have(w,x,y)]
define to: LP.P
define be: LP.P
define for: Lp.p
define wants: Lp'.Lx.[Av.[D(w,x,v) -> p'(v)]] 
define wants-VP: LY.Lx.[Av.[D(w,x,v) -> Y(v)(x)]] 
define EXT: LY.Lx.Y(w)(x) 
define EXTQ: LZ.Z(w) 

exercise tree
title Basic derivation for "want".


directions \\
directions (i) Start the calculator from the jar archive \\
directions (ii) Select 'Use the Interactive Exercise Solver' \\
directions (iii) Load want2.txt \\
directions (iv) Select Part F \\
directions (v) select the top node, and click Evaluate Node Fully. \\
directions  This illustrates the desired behavior. In the source file for this tree, \\
directions all indices have their types stipulated. \\
directions (vi) Select Part G \\
directions (v) select on the top node, and click Evaluate Node Fully. \\
directions  This time there is an error. \\
directions  \\
directions The second tree is like the first one, except that the <e> specifications \\
directions have been deleted.  The system decides that 2 has type <s, <et, t>> rather \\
directions than the default e, which is what is desired. \\


[.S Mary [.VP [.V wants] [.S [.NP John] [.VP to [.VP be [.AP asleep]]]]]]

exercise tree
title Paraphrase of [Mary wants to be asleep]
instructions [Mary wants herself to be asleep]
[.S Mary [.S 1 [.S t_1 [.VP [.V wants] [.S t_1 [.VP to [.VP be [.AP asleep]]]]]]]]

exercise tree
title Zippering QR of [to be asleep]
instructions Node 7 has the arguments [to be asleep] and [Mary]
instructions just like the 'want' in [Mary wants to be asleep].
instructions We take the lambda term annotating node 7 as the 
instructions lexical semantics for want-VP

[.S [.NP Mary] [.S [.VP to [.VP be [.AP asleep]]][.S 2<s,<e,t>> [.S 1<e> [.S t<e>_1 [.VP [.V wants] [.S  t<e>_1 [EXT t<s,<e,t>>_2] ]]]]]]]

exercise tree
title [Mary wants to be asleep]
instructions 

[.S Mary [.VP [.V wants-VP] [.VP to [.VP be [.AP asleep]]]]]

exercise tree
title Paraphrase of [Mary wants a cookie]
instructions [Mary wants herself to have a cookie]
[.S Mary [.S 1 [.S t_1 [.VP [.V wants] [[a cookie][2 [.S t_1 [.VP to [.VP [.V have] t_2]]]]]]]]]

exercise tree
title Zippering QR of [a cookie] with intensional trace
instructions [Mary wants herself to have a cookie]
[.S Mary [.S [a cookie][.S 3<s,<et,t>> [.S 1<e> [.S t<e>_1 [.VP [.V wants] [[EXTQ t<s,<et,t>>_3] [2<e> [.S t<e>_1 [.VP to [.VP [.V have] t<e>_2]]]]]]]]]]]


exercise tree
title Zippering QR of [a cookie] with intensional trace
instructions [Mary wants herself to have a cookie]
[.S Mary [.S [a cookie][.S 3<s,<et,t>> [.S 1 [.S t_1 [.VP [.V wants] [[EXTQ t<s,<et,t>>_3] [2 [.S t_1 [.VP to [.VP [.V have] t_2]]]]]]]]]]]