Training Assignment 1

constants of type e : a b c
constants of type <e,t> : P-Q
constants of type <e*e,t> : R
variables of type e : u-z
variables of type <e,t> : X Y

exercise semantic types
title Semantic Types
directions Give the semantic type of the following lambda-expressions.
directions For instance, the type of "x" is e, and the type of "P(x)"
directions is t.
directions You may want to simplify the expressions in your mind if 
directions necessary before assigning a type.
directions You may omit commas between single-letter types only. Angled
directions brackets around single-letter type combinations can be omitted 
directions as well. Thus
directions you can abbreviate <<e,t>,<e,t>> as <<et>,<et>> or simply 
directions <et,et>.
points per exercise 5

P(a) -> Q(b)
Lx[P(x) & Q(x)]
Lx.Ay[(x=y) V Q(x)]
Lx.Ly.R(x,y)
Lx.Ez[Ly.R(x,y) (z)]
Iy[(Lz[P(z)]) (y)]
LX[Lx[X(x)]]
LX.LY.Ix[X(x) V Y(x)]


exercise lambda conversion
title Lambda Conversion
directions After checking that the type of the function and the type of the
directions argument(s) match, simplify the following expressions performing
directions one lambda-conversion at a time.
points per exercise 10

Lx.Ly.[R(x,y) & R(y,x)]   (a)  (b)
Lx.Ly.Lz.[R(y,y) V R(x,z)]    (a)    (b)   
Lx.Ly.Ey[R(x,y) & Q(x)] (a) (b)
Ly.[Q(b) V R(b,b)]    (a)
Ly.Lx.Az[R(x,z) -> Ex(R(y,x))]   (a)   (b)
Ly.Lx.~Ey[Q(y) & Ax(R(x,y))]   (a)   (b)
Lx.Ly.Lx.[R(x,b) & T(y)]   (a)  (b)  (c)
Lx.Ey[Q(x) V T(y)]    (y)
Lx.Ly.[ExEy[R(x,y)] -> P(x) & Q(y)]  (a)  (b)
Lx.Ly.[T(x) & Az[P(z) -> R(x,y)]]  (z) (z)
