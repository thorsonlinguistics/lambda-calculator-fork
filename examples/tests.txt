Homework 2

# one can write arbitrary comments in this file after hashes

constants of type e : a b-c j m
constants of type <e,t> : P-Q
constants of type <e*e,t> : R
variables of type e : x-z
variables of type <et> : X Y

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction

define sleep,sleeps : Lx. *sleep(x)
define happy : Lx. happy(x)
define guy : Lx. guy(x)
define love, loves : LyLx. love(x,y)
define someone, somebody : LX. Ex. *X(x) & x <: x
define everyone, everybody : LX. Ax. X(x)
# TODO when we define "someone" as  LP. Ex. P(x),
# we should get an immediate warning because P is declared above to 
# be a constant
define a : LX.LY. Ex. X x & Y x
define is : LX.Lx. X(x)

# can we define "is" as LX.X?
define John : j	
define Mary : m

exercise lambda conversion
title Lambda Conversion
directions After checking that the type of the function and the type of the
directions argument(s) match, simplify the following expressions performing
directions one lambda-conversion at a time.
directions \alpha \beta \gamma \delta \Psi \Omega
points per exercise 10

P_<e*e*e*e*e*e*t*t,t>(\alpha_e,\beta_e,\gamma_e,\delta_e,\Psi_e,\Omega_e,\L\AUGH_<et>(a),\L\ITT\L\E_<et>(b))

exercise tree
title Full Derivations
directions Derive the semantic value of each nonterminal node of the tree.
points per exercise 20

[.S John [.VP sleeps]]
[.S John [.VP (does) [.VP sleep]]]
[.S John [.VP loves Mary]]
[.S [.NBAR a guy] [.VP loves Mary]]
[.NP a guy]
[.S [.NP a [.N' happy guy]] [.VP sleeps]]
[.S John [ 1 [.VP t_1 sleeps]]]
[.S' John [ 1 [.S Mary [.VP loves t_1]]]]
[.S everybody [ 1 [.VP t_1 sleeps]]]
[.S everybody [ 1 [ somebody [ 2 [.VP t_1 [ loves t_2]]]]]]
[.S somebody [ 2 [ everybody [ 1 [.VP t_1 [ loves t_2]]]]]]
[.S everybody [ 1 [.VP t_1 sleeps]]]
#[ t_1 sleeps]
[.S' \alpha [ 1 [.S \beta [.VP loves t_1]]]]
