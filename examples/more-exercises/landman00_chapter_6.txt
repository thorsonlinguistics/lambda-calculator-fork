Landman 2000 chapter 6

# Author and license holder of this file: Lucas Champollion (champollion@nyu.edu)
# This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA 4.0). You are free to share — copy and redistribute the material in any medium or format; adapt — remix, transform, and build upon the material for any purpose, even commercially. 
# The copyright to Fred Landman's work remains with him.

# General constants and variables

constants of type e : j b m
constants of type <e,t> : boy girl raft
constants of type <v,t> : walk kiss meet invite carry-the-piano-upstairs build
constants of type <v,e>  : ag th inst
constants of type n : one two three four five six seven eight nine ten

variables of type e : x y z a X Y Z
variables of type v : e
variables of type <e,t> : P Q
variables of type <<e,t>,t> : T
variables of type <e,<v,t>>: R

# Set theory
# constants of type <e,<<e,t>,t>> : element-of

# Plurality

# Part-of 
constants of type <e*e,t>: ipart-of is-atomic-part-of
constants of type <v*v,t>: part-of

# Sum
constants of type <e*e,e>: isum-of
constants of type <v*v,v>: esum-of

# Generalized sum and sigma
constants of type <<e,t>,e> : σ ibig-sum-of
constants of type <<v,t>,v> : ebig-sum-of

# Groups: igroup-of is the uparrow, iun-group-of is the downarrow
constants of type <e,e>: igroup-of iun-group-of

# Atoms and cardinality
# is-atomic-part-of is another notation for iatoms-of
constants of type <e,<e,t>>: iatoms-of 
constants of type <v,<v,t>>: eatoms-of
constants of type <e,n>: card
constants of type <et,e>: max

# Singularization and pluralization (and distributivity operator)
constants of type <<e,t>,<e,t>>: iatoms-in star idist
constants of type <<v,t>,<v,t>>: eatoms-in estar edist

# Plural roles
constants of type <<v,e>,<v,e>>: rstar


# The H' function from Krifka '98 that maps events to their runtime in hours
constants of type <v,n>: H

multiple letter identifiers

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction


define john : j
define bill : b
define mary : m


define walk,walks,walked : Lx.Le. [estar(walk)(e) & rstar(ag)(e)=x]
define kiss,kisses,kissed : Ly.Lx.Le. [estar(kiss)(e) & rstar(ag)(e)=x & rstar(th)(e)=y]
define invite,invites,invited : Ly.Lx.Le. [estar(invite)(e) & rstar(ag)(e)=x & rstar(th)(e)=y]
define built : Ly.Lx.Le. [estar(build)(e) & rstar(ag)(e)=x & rstar(th)(e)=y]


define closure: LR_<vt>.Ee.R(e)

define lift-iv : LV_<e,vt>.LT.Le.T(Lx.V(x)(e))
define lift-iv-prime : LV_<e,vt>.LT.Le.T(Lx. Ee'[part-of(e',e) & V(x)(e)])
define lift-tv : LV_<e,<e,vt>>.LT.Lx.Le.T(Ly.V(y)(x)(e))
define lift-np : Lx.LP.P(x)


# Plural
define plural,s : LP.star(P)

# Theory D: Only use collective NP denotations.
# Theory S: Both collective or distributive NP denotations are available.

# NP conjunction
define and-group : Lx.Ly.igroup-of(isum-of(x,y))
define and-sum : Lx.Ly.isum-of(x,y)

# Definite descriptions
define the-group: LP.igroup-of(σ(P))
define the-sum: LP.σ(P)

# Quantifiers
define three-group: LQ.LP.EX.[Q(X) & card(X)=three & P(igroup-of(X))]
define three-sum: LQ.LP.EX.[Q(X) & card(X)=three & P(X)]
define four-group: LQ.LP.EX.[Q(X) & card(X)=four & P(igroup-of(X))]
define four-sum: LQ.LP.EX.[Q(X) & card(X)=four & P(X)]
define a: LQ.LP.Ex.[Q(x) & P(x)]


define all: LQ.LP.EX.[X = max(Q) & star(P)(X)]

define boy: boy
define girl: girl
define raft: raft

# In both theories, QR applies obligatorily to quantificational NPs and optionally to nonquantificational NPs.
# It raises NPs above closure.

# The scopal operators apply just after lambda abstraction.
define NQI : LP.P
define SQI: LP.Lx.Ay.[is-atomic-part-of(y,x) -> P(y)]
define DQI: LP.Lx.Ay.[is-atomic-part-of(y, iun-group-of(x)) -> P(y)]

#########

define are: LP.P


define dist: LQ.LP.Q(Lx.Ay.[is-atomic-part-of(y,x) -> P(y)])

#Alternative formulation (see Landman p. 149f.)
define dist2 : LP.star(atoms-in(P))

define as-a-group: Lx.group-of(x)

define carry-the-piano-upstairs : carry-the-piano-upstairs

define SQI-NP: Lx.x

define for-an-hour: LR.Lx.Le.[H(e)=1 & [[Ee'.part-of(e',e)] & Ae'.[part-of(e',e) -> R(x)(e')]]]



##########################################################################################

exercise tree
title Example sentences

#instructions Testing Eytan Zweig's proposal for 'all'.
#[ closure [ [ all [ boy s ] ] [ lift-iv [ [ lift-tv built ] [ a raft ] ] ] ] ] 	

#instructions Testing Eytan Zweig's proposal for 'all', with changed lift-iv.
#[ closure [ [ all [ boy s ] ] [ lift-iv-prime [ [ lift-tv built ] [ a raft ] ] ] ] ] 	


[ [ four-sum [ girl s ] ] [ 1 [ closure [ [ three-sum [ boy s ] ] [ lift-iv [ [ invited t_1 ] for-an-hour ] ] ] ] ] ]


[ closure [ [ three-sum [ boy s ] ] [ lift-iv [ [ [ lift-tv invited ] [ four-sum [ girl s ] ] ] for-an-hour ] ] ] ]


# moving SQI over to the NP
[ [ [ three-sum [ boy s ] ] SQI-NP ]  [ 1 [ closure  [ t_1 [ [ lift-tv invited ] [ four-sum [ girl s ] ] ] ] ] ] ] 


#instructions Reading 2 bis: Ds(Co) (Landman): QR sum subject with SQI, leave group object in situ
#instructions  A GROUP OF FOUR GIRLS PER BOY
#instructions Negation added
#[ [ three-sum [ boy s ] ] [ SQI [ 1 [ closure [ not [ t_1 [ [ lift-tv invited ] [ four-group [ girl s ] ] ] ] ] ] ] ] ]

[ closure [ john walks ] ]

[ closure [ john [ kisses mary ] ] ]

[ closure [ [ john [ and-group mary ] ] walk ] ]

[ closure [ [ the-group [ boy s ] ] walk ] ]

# leads to type mismatch
[ closure [ [ three-group [ boy s ] ] walk ] ]

# Type mismatch resolved with lifting
[ closure [ [ three-sum [ boy s ] ] [ lift-iv walk ] ] ]

[ closure [ [ three-group [ boy s ] ] [ lift-iv walk ] ] ]


# type mismatch resolved with QR
[ [ three-group [ boy s ] ] [ NQI [ 1 [ closure [ t_1 walk ] ] ] ] ]

[ [ three-group [ boy s ] ] [ SQI [ 1 [ closure [ t_1 walk ] ] ] ] ]

[ [ three-group [ boy s ] ] [ DQI [ 1 [ closure [ t_1 walk ] ] ] ] ]

[ [ three-sum [ boy s ] ] [ NQI [ 1 [ closure [ t_1 walk ] ] ] ] ]

[ [ three-sum [ boy s ] ] [ SQI [ 1 [ closure [ t_1 walk ] ] ] ] ]

[ [ three-sum [ boy s ] ] [ DQI [ 1 [ closure [ t_1 walk ] ] ] ] ]


# Theory 1: Lakoff: only DQI quantifier raising; verb lifting; NPs have only collective interpretations
# Also indicating how Landman's Theory 3 derives these readings


instructions Reading 1: Cs-Co (Lakoff, Landman): group subject and group object in situ
instructions A GROUP OF THREE BOYS - A GROUP OF FOUR GIRLS
[ closure [ [ three-group [ boy s ] ] [ lift-iv [ [ lift-tv invited ] [ four-group [ girl s ] ] ] ] ] ] 	


instructions Reading 2: Ds(Co) (Lakoff): QR group subject with DQI, leave group object in situ
instructions A GROUP OF THREE BOYS - A GROUP OF FOUR GIRLS
[ [ three-group [ boy s ] ] [ DQI [ 1 [ closure [ t_1 [ [ lift-tv invited ] [ four-group [ girl s ] ] ] ] ] ] ] ] 

instructions Reading 2 bis: Ds(Co) (Landman): QR sum subject with SQI, leave group object in situ
instructions  A GROUP OF FOUR GIRLS PER BOY
[ [ three-sum [ boy s ] ] [ SQI [ 1 [ closure [ t_1 [ [ lift-tv invited ] [ four-group [ girl s ] ] ] ] ] ] ] ] 


instructions Reading 3: Do(Cs) (Lakoff): QR group object with DQI, leave group subject in situ
instructions A GROUP OF THREE BOYS PER GIRL
[ [ four-group [ girl s ] ] [ DQI [ 1 [ closure [ [ three-group [ boy s ] ] [ lift-iv [ invited t_1 ] ] ] ] ] ] ]

instructions Reading 3 bis: Do(Cs) (Landman): QR sum object with SQI, leave group subject in situ 
instructions A GROUP OF THREE BOYS PER GIRL
[ [ four-sum [ girl s ] ] [ SQI [ 1 [ closure [ [ three-group [ boy s ] ] [ lift-iv [ invited t_1 ] ] ] ] ] ] ]


instructions Reading 4: Ds(Do(-)) (Lakoff): first QR group object with DQI, then QR group subject with DQI; leave sum object in situ 
instructions FOUR GIRLS PER BOY
[ [ three-group [ boy s ] ] [ DQI [ 2 [ [ four-group [ girl s ] ] [ DQI [ 1 [ closure [ t_2 [ invited t_1 ] ] ] ] ] ] ] ] ]

instructions Reading 4 bis: Ds(Do) (Landman): QR sum subject with SQI, leave sum object in situ 
instructions FOUR GIRLS PER BOY
[ [ three-sum [ boy s ] ] [ SQI [ 1 [ closure [ t_1 [ [ lift-tv invited ] [ four-sum [ girl s ] ] ] ] ] ] ] ] 


instructions Reading 5: Do(Ds(-)) (Lakoff): QR group subject with DQI, then QR group object with DQI; leave sum subject in situ
instructions THREE BOYS PER GIRL
[ [ four-group [ girl s ] ] [ DQI [ 2 [ [ three-group [ boy s ] ] [ DQI [ 1 [ closure [ t_1 [ invited t_2 ] ] ] ] ] ] ] ] ]

instructions Reading 5 bis: Do(Ds) (Landman): QR sum object with SQI, leave sum subject in situ
instructions THREE BOYS PER GIRL
[ [ four-sum [ girl s ] ] [ SQI [ 1 [ closure [ [ three-sum [ boy s ] ] [ lift-iv [ invited t_1 ] ] ] ] ] ] ]

# Theory 2: Roberts: DQI and NQI quantifier raising; verb lifting; NPs have only collective interpretations: adds following two readings

instructions Reading 6: Cs-Do (Roberts)
instructions A GROUP OF FOUR GIRLS IS INVITED BY THREE SEPARATE BOYS
[ [ four-group [ girl s ] ] [ NQI [ 2 [ [ three-group [ boy s ] ] [ DQI [ 1 [ closure [ t_1 [ invited t_2 ] ] ] ] ] ] ] ] ]

instructions Reading 6 bis: Ds-Co (Landman): leave sum object and group object in situ
instructions A GROUP OF FOUR GIRLS IS INVITED BY THREE SEPARATE BOYS
[ closure [ [ three-sum [ boy s ] ] [ lift-iv [ [ lift-tv invited ] [ four-group [ girl s ] ] ] ] ] ] 	

instructions Reading 7: Ds-Co (Roberts)
instructions A GROUP OF THREE BOYS INVITES FOUR GIRLS
[ [ three-group [ boy s ] ] [ NQI [ 2 [ [ four-group [ girl s ] ] [ DQI [ 1 [ closure [ t_2 [ invited t_1 ] ] ] ] ] ] ] ] ]

instructions Reading 7 bis: Cs-Do (Landman): leave group subject and sum object in situ
instructions A GROUP OF THREE BOYS INVITES FOUR GIRLS
[ closure [ [ three-group [ boy s ] ] [ lift-iv [ [ lift-tv invited ] [ four-sum [ girl s ] ] ] ] ] ] 	

# Theory 3: Landman: only SQI (no NQI, no DQI); verb lifting; NPs have both collective and distributive interpretations: adds following reading

instructions Reading 8: Ds-Do (Landman): leave sum subject and sum object in situ
instructions CUMULATIVE READING: A SUM OF THREE BOYS INVITE A SUM OF FOUR GIRLS
[ closure [ [ three-sum [ boy s ] ] [ lift-iv [ [ lift-tv invited ] [ four-sum [ girl s ] ] ] ] ] ] 	

# We can also reformulate some of the previous readings (see above)

# Landman's extension to get branching quantifier readings: add NQI

instructions Reading 9: DsxDo: Start with a sum object and a sum subject, QR one of them with SQI, and after that QR the other with NQI.
instructions BRANCHING READING: A SUM OF THREE BOYS AND A SUM OF FOUR GIRLS ARE SUCH THAT EACH GIRL IS INVITED BY ALL THE BOYS
[ [ three-sum [ boy s ] ] [ NQI [ 2 [ [ four-sum [ girl s ] ] [ SQI [ 1 [ closure [ t_2 [ invited t_1 ] ] ] ] ] ] ] ] ]

