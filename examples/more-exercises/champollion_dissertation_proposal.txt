Lucas Champollion's dissertation proposal, Jan 19, 2009

# Author and license holder of this file: Lucas Champollion (champollion@nyu.edu)
# This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA 4.0). You are free to share — copy and redistribute the material in any medium or format; adapt — remix, transform, and build upon the material for any purpose, even commercially. 

# Global declarations

multiple letter identifiers

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction


# Constants and variables

constants of type <v,n>: hours-prime
constants of type <e,n>: hours
constants of type <v,e>: star-ag star-th star-pat star-in star-ben time

variables of type e: x y z X Y Z t
variables of type v: e
variables of type <e,vt>: R
variables of type <e,t>: P
variables of type <v,t>: f
variables of type <et,t>: Q
variables of type <e,<e,vt>>: V
variables of type <e,<vt,vt>>: H
variables of type <vt,<e,vt>>: v

constants of type <e*e,t>: atom-of relevant-part-of in-partition-i-of
constants of type <v*v,t>: part-of 

constants of type <et,et>: istar
constants of type <vt,vt>: estar
constants of type <ve,ve>: rstar

###############################################################
# Lexicon

define for-an-hour-krifka: LRLxLe.R(x)(e) & hours-prime(e) = 1 & [Ee' part-of(e',e)] & Ae'' [part-of(e'',e) -> R(x)(e'')]

define for-an-hour-dowty-moltmann: LRLx.Et [hours(t) = 1 & At' [relevant-part-of(t',t) -> Ee [R(x)(e) & time(e) = t']]]

define three-boys: LP.EX[three-boys(X) & P(X)]
define four-girls: LP.EY[four-girls(Y) & P(Y)]
define six-girls: LP.EY[six-girls(Y) & P(Y)]
define three-professors: LP.EX[three-professors(X) & P(X)]
define four-prospectives: LP.EY[four-prospectives(Y) & P(Y)]
define two-flowers: LP.EZ[two-flowers(Z) & P(Z)]

# Before essential separation
define invited-landman: LyLxLe.[star-invite(e) & (star-ag(e) = x) & (star-th(e) = y)]
define talked-to-landman: LyLxLe.[star-talk-to(e) & (star-ag(e) = x) & (star-pat(e) = y)]

define closure: Lf.Ee.f(e)


# Type lifters: lift-VP is also later used for vP
define lift-TV : LV.LQ.Lx.Le.Q[Ly.V(y)(x)(e)]
define lift-VP, lift-vbar : LR.LQ.Le.Q[Lx.R(x)(e)]

# Distributivity, Landman style

define dist: LQ.LP.Q(Ly.Ax[atom-of(x,y) -> P(x)])

# After essential separation

define invite,invited: Le.star-invite(e)
define give,gave: Le.star-give(e)

define theme: Lx.Lf.Le.[f(e) & star-th(e) = x]
define ben: Lx.Lf.Le.[f(e) & star-ben(e) = x]
define in: Lx.Lf.Le.[f(e) & star-in(e) = x]
define at: Lt.Lf.Le.[f(e) & time(e) = t]

# Thematic role lifter
define lift: LH.LQ.Lf.Le.Q[Lx.H(x)(f)(e)]

# little v
define v: Lf.Lx.Le.[star-ag(e) = x & f(e)]

define sepdist-QNP: LH.LQ.Lf.Le.Q(Ly.Ax [ atom-of(x,y) -> Ee' [ part-of(e',e) & H(x)(f)(e')]])

define sepdist-QNP-prime: LR.LQ.Le.Q(Ly.Ax [ atom-of(x,y) -> Ee' [ part-of(e',e) & R(x)(e')]])

define sepdist: LH.LQ.Lf.Le.Q(Ly.Ax [ in-partition-i-of(x,y) -> Ee' [ part-of(e',e) & H(x)(f)(e')]])

define sepdist-prime: LR.LQ.Le.Q(Ly.Ax [ in-partition-i-of(x,y) -> Ee' [ part-of(e',e) & R(x)(e')]])




#################################################################

# Figures

exercise tree
title Lucas Champollion's dissertation proposal

instructions Figure 1:  Applying Krifka's entry for "for an hour" to the cumulative sentence "Three professors talked to four prospective students for an hour."
[ closure [ three-professors [ lift-VP [ [ [ lift-TV talked-to-landman ] four-prospectives ]  for-an-hour-krifka ] ] ] ]

instructions Figure 2: Applying Moltmann's entry for for an hour to the cumulative sentence "Three professors talked to four prospective students for an hour."
[ four-prospectives [ 1 [ three-professors [ [ talked-to-landman t_1 ]  for-an-hour-dowty-moltmann ] ] ] ]

instructions Figure 3: Alternative to the previous figure.
[ three-professors [ [ [ lift-TV talked-to-landman ] four-prospectives ]  for-an-hour-dowty-moltmann ] ]

instructions Figure 3a: Type-lifters in action. (This figure is not shown in the proposal.)
[ closure [ three-professors [ lift-VP [ [ lift-TV talked-to-landman ] four-prospectives  ] ] ] ]

instructions Figure 4: An example of the [dist] operator in the sentence "Three boys invited four girls."
[ [ three-boys dist ] [ 1 [ closure [ t_1 [ [ lift-TV invited-landman ] four-girls ] ] ] ] ]

instructions Figure 5: A sample derivation using essential separation. The sentence is "Three boys invited four girls."
[ closure [ three-boys [ lift-vbar [ v [ invited [ [ lift theme ] four-girls ] ] ] ] ] ]

instructions Figure 6: A sample derivation using the [sepdist-QNP] operator. The sentence is "Three boys gave four girls two flowers."
[ closure [ three-boys [ lift-vbar [ v [ [ [ sepdist-QNP ben ] four-girls ] [ gave [ [ lift theme ] two-flowers ] ] ] ] ] ] ]

instructions Figure 7: Using [sepdist-QNP-prime] instead of [dist]. The sentence is "Three boys invited four girls."
[ closure [ three-boys [ sepdist-QNP-prime [ v [ invited [ [ lift theme ] four-girls ] ] ] ] ] ]

instructions Figure 8: An example of inverse distributive scope. Note that the object quantifier has raised without leaving a trace behind. The sentence is "Three boys invited four girls."
[.IP closure [.vP [.DP [.Theta0 sepdist-QNP theme ] four-girls ] [.vP three-boys [.v' lift-vbar [.v' v invited ] ] ] ] ]
