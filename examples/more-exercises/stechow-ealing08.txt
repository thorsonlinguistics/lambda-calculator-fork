Stechow Ealing 2008 handout

# Author and license holder of this file: Lucas Champollion (champollion@nyu.edu)
# This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA 4.0). You are free to share — copy and redistribute the material in any medium or format; adapt — remix, transform, and build upon the material for any purpose, even commercially. 
# The copyright to Arnim von Stechow's work remains with him.


constants of type e : a b c paule knut john mary bill caroline ede otto sveta
variables of type n : d
variables of type e : x-z
variables of type <e,t> : Q X-Z
variables of type <n,t> : D P
constants of type <e*s,t>: girl person
constants of type <e*s,n>: age height
#constants of type <e*n*s,t>: age-at-least
constants of type <nt,n>: max
constants of type <n*n,n>: sum
constants of type n: two-inches six-inches one-meter-sixty zero
constants of type <t,t>: predicted
variables of type s : w v w'
variables of type t : p
variables of type <st,t>: S
variables of type <nt,t>: T
constants of type <<nt,t>,nt>: the minf
constants of type <nt,nt>: somewhere-below
constants of type <<nt,t>,nt>: min-witness
variables of type <n,et>: U
constants of type <nt,<nt,t>>: more

# The following directive instructs the program to
# interpret multiple-letter constants and variables
# properly.

multiple letter identifiers

# "use rule" directives are for tree evaluation exercises.
# They indicate which composition rules are available
# at nonterminals.

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction
use rule intensional function application

# Next, lexical entries provided to the student are given.
# A word (i.e. "sleep") can be given any number of lexical
# entry choices by repeating the "define" directive multiple
# times. Students are able to add their own lexical entries
# as well.

define Knut: knut
define Paule: paule
define John: john
define Mary: mary
define Bill: bill
define Caroline: caroline
define Ede: ede
define Otto: otto
define Sveta: sveta
define one-meter-sixty: LD.[D(one-meter-sixty) & D(zero)]
define every: LQ'.LQ.Ax.[Q'(x)->Q(x)]
define everyone: LQ.Ax.[person(x,w)->Q(x)]
define noone: LQ.~Ex.[person(x,w) & Q(x)]
define anyone: LQ.Ex.[person(x,w) & Q(x)]
define no: LQ'.LQ.~Ex.[Q'(x)&Q(x)]
define girl: Lx.girl(x,w)
define old : Ld.Lx.[age(x,w) >= d]
define tall : Ld.Lx.[height(x,w) >= d]
define short : Ld.Lx.[height(x,w) <= d]
define old2 : LD.Lx.D(age(x,w))
define tall2 : LD.Lx.D(height(x,w))
define tall3 : Ld.Lx.[height(x,w) = d]
define max: LD.max(D)
#define er: LD.LD'.((Ad.[D(d)->D'(d)]) & (Ed.[D'(d)&~D(d)]))
#define er: LD.LD'.more(D)(D')
define er: LD.LD'.[D << D']
# the last two are equivalent to the more spelled out version (except that << is subset-of and should really be proper-subset-of).
define two-inches: two-inches
define six-inches: LD.Ed.[d >= six-inches & D(d)]
#define I-had-predicted: predicted
#define I-had-predicted: Lp.Aw.[accessible(w) -> p]
define I-had-predicted: Lp[Av.[accessible(w,v) -> p(v)]] 
define has-to: Lp[Av.[accessible(w,v) -> p(v)]] 
define Pi: LD.LP.D(max(P))
define m-inf: LT.minf(T)
define not: Lp.~p

# Finally, the exercises themselves are entered.

exercise tree
title Traditional analysis (Stechow Ealing 08)

instructions John is taller than Mary is.
[.S [.DegP [.Deg er ] [2<n> [.S Mary [.AP [.DegP t<n>_2 ] [.A tall ]]]]] [ 1<n> [.S John [.AP [.DegP t<n>_1 ] tall ]]]]

instructions John is not taller than Mary is.\\
instructions \\
instructions Unattested reading according to Kennedy (I agree)
[.S [.DegP [.Deg er ] [2<n> [.S Mary [.AP [.DegP t<n>_2 ] [.A tall ]]]]] [ 1<n> [not [.S John [.AP [.DegP t<n>_1 ] tall ]]]]]

instructions John is not taller than Mary is.\\
instructions \\
instructions Attested reading: not>DegP. Kennedy's point: how do we force DegP = "-er than Mary is" to take scope above rather than below "not"?
[not [.S [.DegP [.Deg er ] [2<n> [.S Mary [.AP [.DegP t<n>_2 ] [.A tall ]]]]] [ 1<n>  [.S John [.AP [.DegP t<n>_1 ] tall ]]]]]



instructions Everyone is taller than Mary is.\\
instructions \\
instructions Kennedy says the traditional analysis makes this ambiguous, but this is not true. 
[.S [.DegP [.Deg er ] [2<n> [.S Mary [.AP [.DegP t<n>_2 ] [.A tall ]]]]] [ 1<n> [.S everyone [.AP [.DegP t<n>_1 ] tall ]]]]

instructions Noone is taller than Mary is.\\
instructions \\
instructions Kennedy says the traditional analysis makes this ambiguous, but this is not true. In this LF, noone is QRed. The resulting interpretation is correct.
[ noone [ 3<e> [.S [.DegP [.Deg er ] [2<n> [.S Mary [.AP [.DegP t<n>_2 ] [.A tall ]]]]] [ 1<n> [.S t<e>_3 [.AP [.DegP t<n>_1 ] tall ]]]]]]

instructions Noone is taller than Mary is.\\
instructions \\
instructions Kennedy says the traditional analysis makes this ambiguous, but this is not true. In this LF, noone is in situ. The resulting interpretation says that (a) for every degree of height above Mary's height, nobody is above it and (b) there is a degree less than or equal to Mary's height and less than or equal to everybody else's height. This is truth conditionally correct.
[.S [.DegP [.Deg er ] [2<n> [.S Mary [.AP [.DegP t<n>_2 ] [.A tall ]]]]] [ 1<n> [.S noone [.AP [.DegP t<n>_1 ] tall ]]]]

instructions Everyone is taller than Mary is.\\
instructions \\
instructions Kennedy says the traditional analysis makes this ambiguous, but this is not true.
[ everyone [ 3<e> [.S [.DegP [.Deg er ] [2<n> [.S Mary [.AP [.DegP t<n>_2 ] [.A tall ]]]]] [ 1<n> [.S t<e>_3 [.AP [.DegP t<n>_1 ] tall ]]]]]]


instructions Mary is shorter than John is.
[.S [.DegP [.Deg er ] [2<n> [.S Mary [.AP [.DegP t<n>_2 ] [.A short ]]]]] [ 1<n> [.S John [.AP [.DegP t<n>_1 ] short ]]]]

instructions Sveta is 160cm tall.\\
instructions The semantics of "one meter sixty" includes zero. This is my way of rendering Arnim's idea that it applies to initial subintervals. Really this requirement should be a presupposition.
[.DP one-meter-sixty [1<n> [.S Sveta [.AP [.DegP t<n>_1 ] tall]]]]

instructions Sveta is 160cm short. (deviant)
[.DP one-meter-sixty [1<n> [.S Sveta [.AP [.DegP t<n>_1 ] short]]]]

instructions John is taller than 160cm.
[.S [.DegP [.Deg er-hack ] one-meter-sixty ] [ 1<n> [.S John [.AP [.DegP t<n>_1 ] tall ]]]]


