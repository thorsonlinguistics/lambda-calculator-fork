Lucas Champollion's companion file for Heim and Kratzer 1998, chapter 8

# This file is meant as a companion to chapter 8 of Heim and Kratzer 1998.
# Author and license holder of this file: Lucas Champollion (champollion@nyu.edu)
# This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA 4.0). You are free to share — copy and redistribute the material in any medium or format; adapt — remix, transform, and build upon the material for any purpose, even commercially. 
# The copyright to the textbook Heim and Kratzer 1998 and all its contents remains with their authors. 
# Maximum points: 100


constants of type e: john al tea
constants of type <et,<et,t>>: morethantwo
variables of type t: p


variables of type e: u-z
variables of type <e,t>: f j
variables of type <e,et>: g-h
variables of type <e,<e,<et>>>: k
variables of type <et,<et,t>>: d
variables of type <et,t>: Q R
variables of type <e,<et,t>>: m


use rule function application
use rule predicate modification
use rule lambda abstraction
use rule non-branching nodes

multiple letter identifiers


define a,an,one,some: Lf[Lj[Ez[f(z) & j(z)]]]
define no: Lf[Lj[~Ez[f(z) & j(z)]]]
define every: Lf[Lj[Az[f(z) -> j(z)]]]

define John: john
define leave: Lx[leave(x)]
define not: Lp[~p]
define Al: al
define more-than-two: Lf[Lf'[morethantwo(f)(f')]]
define meeting,meetings: Lx[meeting(x)]
define attend: Ly[Lz[attend(z,y)]]
define clock: Lx[clock(x)]
define return: Ly[Lz[Lx[return(x,y,z)]]]
define to: Lx.x
define s: Ly[Lg[Ix[g(y)(x)]]]
define owner: Ly[Lx[owner-of(x,y)]]
define more-than-two2: Lf[Lg[Ly[morethantwo(f)(Lx[g(x)(y)])]]]
define foreign: Lx[foreign(x)]
define country: Lx[country(x)]
define student: Lx[student(x)]
define from: Ly[Lx[from(x,y)]]
define was,is: Lf[f]
define admitted: Lx[admitted(x)]
define espresso-machine: Lx[espresso-machine(x)]
define drinks-tea: Lx[drinks(x,tea)]
define basket: Lx[basket(x)]
define apple: Lx[apple(x)]
define rotten: Lx[rotten(x)]
define in: Ly[Lx[in(x,y)]]
define class: Lx[class(x)]
define professor: Lx[professor(x)]
define met: Ly[Lx[meet(x,y)]]
define city: Lx[city(x)]
define person: Lx[person(x)]
define despises: Ly[Lx[despise(x,y)]]

exercise tree
title Chapter 8 "Constraints on quantifier movement"
points per exercise 5

directions Compute the meaning of these trees, adding lexical entries as needed.

instructions Section 8.4.1, example (2) "John did not leave".
[.IP John [ 1 [.I' (did) [ not [.VP t_1 leave]]]]]

instructions Section 8.4.1, example (4a), "Al did not attend more than two meetings", inverse scope, with quantifying into VP.
[.IP [.DP more-than-two meetings] [2 [.IP Al [1 [.I' (did) [ not [.VP t_1 [.V' attend t_2]]]]]]]]

instructions Section 8.4.1, example (4b), "Al did not attend more than two meetings", surface scope, with quantifying into IP.
[.IP Al [1 [.I' (did) [ not [.VP [.DP more-than-two meetings] [2 [.VP t_1 [.V' attend t_2]]]]]]]]

instructions Section 8.4.2, example (4c), "Al did not attend more than two meetings", surface scope, with quantifying into VP and type shifted quantifier.
[.IP Al [.I' (did) [ not2 [.VP [.DP more-than-two2 meetings] [1 [.VP attend t_1]]]]]]

instructions Section 8.4.2, example (4d), "Al did not attend more than two meetings", surface scope, with type shifted quantifier interpreted in situ.
[.IP Al [.I' (did) [ not2 [.VP attend [.DP more-than-two2 meetings]]]]]

instructions Section 8.4.2, example (5'), "Al did not return every clock to its owner", with quantifying into VP and type shifted quantifier.
[.S [.DP Al] [.I' [.I (did) not2] [.VP [.DP every2 clock] [1 [.VP [.V' return t_1] [.PP to [.DP [ it_1 s] owner]]]]]]]

instructions Section 8.5.1, example (2), "No student from a foreign country was admitted", inversely-linked reading with quantifying into IP. This is not the most plausible reading for this sentence.
[.IP [.DP a [.NP foreign country]] [1 [.IP [.DP no [.NP student [.PP from t_1]]] [.VP (was) admitted]]]]

instructions Section 8.5.1, example (3), "No student from a foreign country was admitted", with a vacuous binder and a free variable.
[.IP [.DP no [.NP student [.PP from t_1]]] [2 [.IP [.DP a [.NP foreign country]] [1 [.IP t_2 [.VP (was) admitted]]]]]]

instructions Section 8.5.1, exercise 2 on page 223, "No student from a foreign country was admitted", leads to a type mismatch. After you've completed this tree, repair the mismatch by assigning the meaning "lambda p.p" to "admitted", and compute the meaning up the tree to get full points for this exercise.
[.IP [.DP no student] [2 [.IP [.DP a [.NP foreign country]] [1 [.IP [.DP t_2 [.PP from t_1]] [.VP (was) admitted]]]]]]

instructions Section 8.5.1, exercise 1 on page 224, "No student from a foreign country was admitted", with a type-shifted meaning for "a" and in-situ interpretation.
[.IP [.DP no [.NP student [.PP from [.DP a2 [.NP foreign country]]]]] [.VP (was) admitted]]

instructions Section 8.5.1, exercise 2 on page 224, "No student from a foreign country was admitted", with a type-shifted meaning for "a" and quantifying into NP.
[.IP [.DP no [.NP [.DP a2 [.NP foreign country]] [ 1 [.NP student [.PP from t_1]]]]] [.VP (was) admitted]]

instructions  Section 8.5.2, numberless exercise, "No student who is from a foreign country was admitted", with quantifying into IP.
[.IP [.DP no [.NP student [.CP who_1 [.IP [.DP a [.NP foreign country]] [2 [.IP t_1 [.VP is [.PP from t_2 ]]]]]]]] [.VP (was) admitted]]


instructions Section 8.5.2, example (7), "No student from a foreign country was admitted", with PRO movement and quantifying into PP.
[.IP [.DP no [.NP student [.PP (PRO) [1 [.PP [.DP a [.NP foreign country]] [2 [.PP t_1 [.P' from t_2]]]]]]]] [.VP was admitted]]

instructions Section 8.5.3, example (9'), "No owner of an espresso machine drinks tea", with PRO movement and quantifying into NP.
[.IP [.DP no [.NP (PRO) [1 [.NP [.DP an espresso-machine] [2 [.NP t_1 [.N' owner [.PP (of) t_2]]]]]]]] [.VP drinks-tea]]

instructions Section 8.6, example (2), "One apple in every basket is rotten", inversely-linked reading, with quantifying into IP.
[.IP [.DP every basket] [ 1 [.IP [.DP [.D one] [.NP apple [.PP [.P in] t_1]]] [.VP (is) rotten]]]]

instructions Section 8.6, example (3), "One apple in every basket is rotten", inversely-linked reading, with quantifying into DP and type-shifted meaning of "every".
[.IP [.DP [.DP every3 basket] [ 1 [.DP one [.NP apple [.PP in t_1]]]]] [.VP (is) rotten]]

instructions Section 8.6.1, example (5'), "John met neither a student from every class nor a professor", with quantifying into DP.
[.IP [.DP [.DP [.DP every3 class] [ 2 [.DP a [.NP student [.PP from t_2]]]]] [ neither-nor [.DP a professor]]] [ 1 [.IP John [.VP met t_1]]]]

instructions Section 8.6.1, example (i) in the Exercise, "John met neither a student from every class nor a professor", with quantifying into IP.
[.IP [.DP every class] [2 [.IP [.DP [.DP a [.NP student [.PP from t_2]]] [ neither-nor [.DP a professor]]] [ 1 [.IP John [.VP met t_1]]]]]]

instructions Section 8.6.3, example (9'), "Someone from every city despises it", modified into "some person". 
[.IP [.DP every city] [ 1 [.IP [.DP some [.NP person [.PP from t_1]]] [.VP despises it_1]]]]

instructions Section 8.6.3, example (9''), "Someone from every city despises it", modified into "some person". Note how the pronoun is free in this LF.
[.IP [.DP [.DP every3 city] [ 1 [.DP some [.NP person [.PP from t_1]]]]] [.VP despises it_1]]

