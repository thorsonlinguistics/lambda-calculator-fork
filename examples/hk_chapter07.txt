Heim and Kratzer 1998, chapter 7

# This file is meant as a companion to chapter 7 of Heim and Kratzer 1998.
# Maximum points: 100


# Meanings that the student is asked to assign:
# nobody2, everybody3, and3, or4


constants of type e: ann maria bill portuguese john home addressee speaker
constants of type <et,<et,t>>: few lots
variables of type e: u-z
variables of type t: p
variables of type <e,t>: f j
variables of type <e,et>: g-h
variables of type <e,<e,<et>>>: k
variables of type <et,<et,t>>: d
variables of type <et,t>: Q R


use rule function application
use rule predicate modification
use rule lambda abstraction
use rule non-branching nodes

multiple letter identifiers

multiple reductions on

define everybody1,everything1: Lf[Ax[f(x)]]
define everybody2: Lh[Lx[Ay[h(y)(x)]]]
define somebody1: Lf[Ex[f(x)]]
define somebody2: Lh[Lx[Ey[h(y)(x)]]]
define offended: Ly[Lx[offend(x,y)]]
define greets: Ly[Lx[greet(x,y)]]
define Ann: ann
define introduced: Ly[Lz[Lx[introduce(x,y,z)]]]
define to: Lx.x
define Maria: maria
define a1,one: Lf[Lf'[Ey[f(y) & f'(y)]]]
define a2: Lf[Lg[Lx[Ey[f(y) & g(y)(x)]]]]
define lexical-rule: Ld[Lf[Lg[Lx[d(f)(Lz[g(z)(x)])]]]]
define linguist: Lx[linguist(x)]
define in: Ly[Lx[in(x,y)]]
define on: Ly[Lx[on(x,y)]]
define the: Lf[Ix[f(x)]]
define garden: Lx[garden(x)]
define porch: Lx[porch(x)]
define or2: Lj[Lf[Lx[f(x) V j(x)]]]
define Bill: bill
define writes: Ly[Lx[write(x,y)]]
define reads: Ly[Lx[read(x,y)]]
define Portuguese: portuguese
define books: Lx[book(x)]
define articles: Lx[article(x)]
define a-few: Lf[Lf'[few(f)(f')]]
define a-lot-of: Lf[Lf'[lots(f)(f')]]
define be-read: Lx[be-read(x)]
define John: john
define home: home
define stay: LyLx[stay(x,y)]
define Not1: LQ[Lf[~Q(f)]]
define not2: Lf[Lx[~f(x)]]
define every: Lf[Lj[Az[f(z) -> j(z)]]]
define every2: Lf[Lg[Lx[Az[f(z) -> g(z)(x)]]]] 
define meeting: Lz[meeting(z)]
define representative: Lx[representative(x)]
define company: Lx[company(x)]
define sent: LyLzLx[sent(x,y,z)]
define basket: Lx[basket(x)]
define apple: Lx[apple(x)]
define rotten: Lx[rotten(x)]
define novel: Lx[novel(x)]
define you: addressee
define I: speaker
define read: LyLx[read(x,y)]
define woman: Lx[woman(x)]
define blamed: Ly[Lx[blame(x,y)]]
define no: Lf[Lj[~Ez[f(z) & j(z)]]]
define man: Lx[man(x)]
define noticed: Ly[Lx[notice(x,y)]]
define snake: Lx[snake(x)]
define next-to: Ly[Lx[next-to(x,y)]]
define herself2: Lg[Lx[g(x)(x)]]
define bought: Ly[Lx[buy(x,y)]]
define book: Lx[book(x)]
define about: Ly[Lx[about(x,y)]]


# the next two lines can be removed if students are to supply them
define and3: Lh[Lg[Ly[Lx[g(y)(x) & h(y)(x)]]]]
define or4: LR[LQ[Lf[Q(f) & R(f)]]]


exercise tree
title Chapter 7 "Quantification and grammar" - Solve 10 out of 20 sentences
points per exercise 5


instructions This tree reproduces tree (1) in Section 7.2.1 and exemplifies the flexible types approach discussed there. Compute the truth conditions of this tree ("Everybody offended somebody", surface scope reading).

[.S [.NP [.N everybody1]] [.VP [.V offended] [.NP [.N somebody2]]]]


instructions Specify the lexical entry for 'nobody2' and calculate the truth conditions for the tree below, corresponding to "somebody1 greets nobody2". (Exercise 1, Section 7.2.1.)

[.S [.NP [.N somebody1]] [.VP [.V greets] [.NP [.N nobody2]]]]


instructions Design a new entry for 'everybody' (everybody3) that makes it possible to interpret phrase structure trees of the following kind. Use the typing conventions in the lower left hand corner of this window. Calculate the truth conditions for the tree below. Note: "introduce(x,y,z)" stands for "x introduced y to z". (Exercise 2, Section 7.2.1. "Ann introduced everybody to Maria.")

[.S Ann [.VP [.V' introduced everybody3 ] [.PP to Maria]]]


instructions This tree illustrates the flexible-types approach described in Section 7.2.1. The determiner "a" has been given a type-shifted meaning. Calculate the truth conditions for the tree. ("Everybody offended a linguist.")

[.S [.DP [.NP everybody1]] [.VP [.V offended] [.DP [.Det a2] [.NP linguist]]]]


instructions This tree illustrates the flexible-types approach described in Section 7.2.1. The lexical rule (3) in that section is implemented here as a type-shifting terminal that shifts the meaning of the determiner "a" from its standard meaning to the one of "a2" from the previous tree. Calculate the truth conditions for the tree. ("Everybody offended a linguist.")

[.S [.DP [.NP everybody1]] [.VP [.V offended] [.DP [.Det lexical-rule [.Det a1]] [.NP linguist]]]]


instructions This tree illustrates the flexible-types approach to coordination described in Section 7.2.1. Calculate the truth conditions for the tree. ("Ann will be in the garden or on the porch.")

[.S Ann [.VP (will) [.VP (be) [.PP [.PP in [.DP the garden]] [ or2 [.PP on [.DP the porch]]]]]]]


instructions Define an appropriate meaning for "and3" and use it to calculate the truth conditions for this tree. (First half of Exercise 1, Section 7.2.2. "Bill writes and reads Portuguese.")

[.S Bill [.VP [.V [.V writes] [ and3 [.V reads]]] Portuguese]]


instructions Define an appropriate meaning for "or4" and use it to calculate the truth conditions for this tree. (Second half of Exercise 1, Section 7.2.2. "A few books or a lot of articles will be read.")

[.S [.DP [.DP a-few books] [ or4 [.DP a-lot-of articles ]]] [.VP (will) [.VP be-read]]]



instructions Define an appropriate meaning for "Not1" and use it to calculate the truth conditions for this tree. (First half of Exercise 2, Section 7.2.2. "Not everything will be read.")

[.S [.DP Not1 [.DP everything1]] [.VP (will) [.VP be-read]]]


instructions Define an appropriate meaning for "not2" and use it to calculate the truth conditions for this tree. (Second half of Exercise 2, Section 7.2.2. "John does not stay at home.")

[.S [.DP John] [.VP [.VP (does) not2] [.VP stay [.PP (at) home]]]]



instructions Calculate the truth conditions for this tree. (Example (3), Section 7.3. "John offended every linguist.")

[.S [.DP every linguist] [ 1 [.S John [.VP offended t_1]]]]



instructions Calculate the truth conditions for this tree, which illustrates the inverse scope reading of "The company sent one representative to every meeting". (Example (3), Section 7.5.1.)

[.S [.DP [.D every] [.NP meeting]] [ 2 [.S [.DP [.D one] [.NP representative]] [ 1 [.S [.DP [.D the] [.NP company]] [.VP [.V' [.V sent] [.DP t_1]] [.PP [.P to] [.DP t_2]]]]]]]]



instructions Calculate the truth conditions for this tree, which illustrates the surface scope reading of "The company sent one representative to every meeting". Note how they differ from the ones in the previous tree. (Example (4), Section 7.5.1.)

[.S [.DP [.D one] [.NP representative]] [ 1 [.S [.DP [.D every] [.NP meeting]] [ 2 [.S [.DP [.D the] [.NP company]] [.VP [.V' [.V sent] [.DP t_1]] [.PP [.P to] [.DP t_2]]]]]]]]



instructions Calculate the truth conditions for this tree, which illustrates the (unlikely) surface scope reading of the sentence "One apple in every basket is rotten". (Discussion for Example (7) in Section 7.5.1.)

[.S [.DP [.D one] [.NP apple [.PP [.P in] [.DP every2 basket]]]] [.VP (is) rotten]]


instructions Calculate the truth conditions for this tree, which illustrates the (plausible) inverse scope reading (also called inverse linking reading) in the sentence "One apple in every basket is rotten". (Exercise for Example (7'), Section 7.5.1.)

[.S [.DP every basket] [ 1 [.S [.DP [.D one] [.NP apple [.PP [.P in] t_1]]] [.VP (is) rotten]]]]



instructions Calculate the truth conditions for this tree, which illustrates Antecedent-Contained Deletion in the sentence "I read every novel you did." (Example (8'), Section 7.5.2.)


[.IP [.DP every [.NP [.NP novel] [.CP which_1 [.C' (that) [.IP you [.I' (did) [.VP read t_1]]]]]]] [ 1 [.IP I [.I' (PAST) [.VP read t_1]]]]]


instructions Calculate the truth conditions for this tree, which illustrates a quantifier-bound pronoun in the sentence "Every woman blamed herself". (Exercise to Example (17) in Section 7.5.3.)

[.S [.DP every woman] [ 1 [.S [.DP t_1] [.VP [.V blamed] [.DP herself_1]]]]]


instructions Calculate the truth conditions for this tree, which illustrates a quantifier-bound pronoun in the sentence "No man noticed the snake next to him". (Exercise to Example (18) in Section 7.5.3.)

[.S [.DP no man] [1 [.S [.DP t_1] [.VP [.V noticed] [.DP [.D the] [.NP [.NP snake] [.PP [.P next-to ] [.DP him_1]]]]]]]]


instructions Calculate the truth conditions for this tree, which illustrates an attempt at a variable-free treatment of the semantics of reflexives. (First half of the final Exercise of the chapter, Section 7.5.3. "No woman blamed herself.")

[.S [.DP no woman] [.VP [.V blamed] [.DP herself2]]]


instructions Calculate the truth conditions for this tree, which illustrates an attempt at a variable-free treatment of the semantics of reflexives. Are the truth conditions correct? (Second half of the final Exercise of the chapter, Section 7.5.3. "No woman bought a book about herself.")

[.S [.DP no woman] [.VP [.V bought] [.DP [.D a2] [.NP [.NP book] [.PP [.P about] [.DP herself2]]]]]]
